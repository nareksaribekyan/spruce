<!--    access.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Giorgi Gulabyan <gulabyang@gmail.com>			
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="chdir">	
	<Requires>fcntl.h</Requires>
	<Test Name="ChdirNormal" FaultSimulationReady="true">
		<Description>chdir() changes the current working directory of the calling process to the directory specified in path.</Description>			
		<Dir count="1"/>
		<Code>
			char * cwd;
			long size;
			int  ret_chdir;
			ret_chdir = chdir(DirPaths[0].c_str());
			if(ret_chdir != 0)
			{
				Error("chdir does not change the working directory.", Fail);
			} 
			
			
			cwd = NULL;
			size = pathconf(".", _PC_PATH_MAX);
			Unres ((cwd = new char[size]) == NULL, "Can not allocate memmory.");
			
			cwd = getcwd(cwd, static_cast<size_t>(size));
			
			Unres (cwd == NULL, "Can not read changed working directory.");
			
			if( strstr(cwd, DirPaths[0].c_str()) == NULL)
			{
				delete cwd;
				Error("Directory change error.", Fail);
			}
			delete cwd;
			EnableFaultSim();
			ret_chdir = chdir("..");
			
			if(ret_chdir != 0)
			{
				Error("chdir does not change the working directory.", Fail);
			} 
			return Success;
		</Code>
	</Test>
	<Test Name="ChdirErrFault">
		<Description>path points outside your accessible address space.</Description>
		<Code>
			ErrorTest(chdir(reinterpret_cast<char *>(-1)), -1, EFAULT);
		</Code>
	</Test>
	<Test Name="ChdirErrIsNotDirectory">
		<Description>A component of path is not a directory.</Description>
		<File count="1"/>
		<Code>
			ENotDirTest(chdir(path), -1);
		</Code>
	</Test>
	<Test Name="ChdirErrTooLongPath">
		<Description>path is too long.</Description>		
		<Code>
			ENameTooLongTest(chdir(path), -1);
		</Code>
	</Test>
	<Test Name="ChdirErrFileNotExist">
		<Description>The file does not exist.</Description>
		<Code>
			ErrorTest(chdir("non_existing_file"), -1, ENOENT);
		</Code>
	</Test>
	<Test Name="ChdirErrLoopInSymLink">
		<Description>Too many symbolic links were encountered in resolving path.</Description>
		<Dir count="1" />
		<Code>
			ELoopDirTest(chdir(path), -1);
		</Code>
	</Test>	
	<Test Name="ChdirErrNoAcces">
		<Description>Search permission is denied for one of the components of path.</Description>
		<Dir count="1" />
		<Code>
			ENoAccessTest(chdir(DirPaths[0].c_str()), -1);			
		</Code>
	</Test>
</TestSet>
	
