<!--    access.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Gurgen Torozyan <gurgen.torozyan@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="name_to_handle">
	<GlobalHeader>
#if !defined(__NR_name_to_handle_at) || !defined(__NR_open_by_handle_at)
	EmptyTestSet(syscall, name_to_handle, Unsupported, "name_to_handle_at or/and open_by_handle_at is/are not supported.")
#else
#if HAVE_STRUCT_FILE_HANDLE==0
		struct file_handle {
				 __u32 handle_bytes;
				 int handle_type;
				 /* file identifier */
				 unsigned char f_handle[0];
			};
#endif
	</GlobalHeader>
	<Requires>unistd.h</Requires>
	<Requires>fcntl.h</Requires>
	<Requires>stdio.h</Requires>
	<Requires>stdlib.h</Requires>
	<Test Name="NameToHandleNormalForFile" FaultSimulationReady="true">
		<Description>name_to_handle_at: Convert name to handle and open_by_handle_at: Open the file handle</Description>
		<File count="1"/>
		<Code>
			struct file_handle *fh = (file_handle*)malloc(sizeof(struct file_handle));
			fh->handle_bytes = 0;
			int mnt_id; 
			int ret = syscall(__NR_name_to_handle_at, AT_FDCWD, (FilePrefix + "0").c_str(), fh, &mnt_id, 0);
			if(ret == -1 && errno == EOVERFLOW )
			{
				int sz = fh->handle_bytes;				
				free(fh);
				fh = (file_handle*)malloc(sizeof(struct file_handle) + sz);
				fh->handle_bytes = sz;
				int ret = syscall(__NR_name_to_handle_at, AT_FDCWD, (FilePrefix + "0").c_str(), fh, &mnt_id, 0);
				if(ret == -1)
				{
					Error("name_to_handle_at failed", Fail);
				}
			}
			
			ret = syscall(__NR_open_by_handle_at, AT_FDCWD, fh, 0);
			if(ret == -1)
			{
				Error("open_by_handle_at failed", Fail);
			}
			return Shallow;
		</Code>
	</Test>
	<Test Name="NameToHandleNormalForDirectory" FaultSimulationReady="true">
		<Description>name_to_handle_at: Convert name to handle and open_by_handle_at: Open the file handle</Description>
		<Dir count="1"/>
		<Code>
			struct file_handle *fh = (file_handle*)malloc(sizeof(struct file_handle));
			fh->handle_bytes = 0;
			int mnt_id; 
			int ret = syscall(__NR_name_to_handle_at, AT_FDCWD, (DirPrefix + "0").c_str(), fh, &mnt_id, 0);
			if(ret == -1 && errno == EOVERFLOW )
			{
				int sz = fh->handle_bytes;				
				free(fh);
				fh = (file_handle*)malloc(sizeof(struct file_handle) + sz);
				fh->handle_bytes = sz;
				int ret = syscall(__NR_name_to_handle_at, AT_FDCWD, (DirPrefix + "0").c_str(), fh, &mnt_id, 0);
				if(ret == -1)
				{
					Error("name_to_handle_at failed", Fail);
				}
			}
			
			ret = syscall(__NR_open_by_handle_at, AT_FDCWD, fh, 0);
			if(ret == -1)
			{
				Error("open_by_handle_at failed", Fail);
			}
			return Shallow;
		</Code>
	</Test>
	<GlobalFooter>
#endif
	</GlobalFooter>
</TestSet>


