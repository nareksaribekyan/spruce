<!--    unlinkat.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//			Ani Tumanyan <ani.tumanyan92@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="unlinkat">	
	<Test Name="UnlinkAtNormal1" FaultSimulationReady="true">
		<Description>Remove a directory entry relative to a directory file descriptor. If  the  pathname given in pathname is relative, then it is interpreted relative to the directory referred to  by  the  file  descriptor  dirfd.</Description>
		<Dir count="1">
			<File count="1"/>
		</Dir>
		<Code>
			string FileNameOnly = DirFilePaths[0].substr(DirPaths[0].length() + 1, DirFilePaths[0].length());
			EnableFaultSim();
			Fail(unlinkat(DirDs[0], FileNameOnly.c_str(), 0) == -1, "Cannot remove file.");
			 // Check if file exists
			Fail ( access( DirFilePaths[0].c_str(), F_OK ) == 0, "Error: unlinked file still exists.");
			
			return Success;
		</Code>
	</Test>
	<Test Name="UnlinkAtNormal2" FaultSimulationReady="true">
		<Description>Remove a directory entry relative to a directory file descriptor. If the pathname given in pathname is relative and dirfd is the  special value  AT_FDCWD,  then  pathname is interpreted relative to the current working directory of the calling process.</Description>
		<File count="1"/>
		<Code>
			EnableFaultSim();
			Fail( unlinkat(AT_FDCWD, FilePaths[0].c_str(), 0) == -1, "Cannot remove file.");
			 // Check if file exists
			Fail ( access( FilePaths[0].c_str(), F_OK ) == 0, "Error: unlinked file still exists.");
			
			return Success;
		</Code>
	</Test>
	<Test Name="UnlinkAtNormal3" FaultSimulationReady="true">
		<Description>Remove a directory entry relative to a directory file descriptor. If the AT_REMOVEDIR flag is specified, then unlinkat() performs the equivalent of rmdir(2) on pathname.</Description>
		<Dir count="1"/>
		<Code>
			Directory Dir(".");
			EnableFaultSim();
			Fail(unlinkat(Dir.GetDirectoryDescriptor(), DirPaths[0].c_str(), AT_REMOVEDIR) == -1, "Cannot remove directory.");
			 // Check if file exists
			Fail ( access( DirPaths[0].c_str(), F_OK ) == 0, "Error: unlinked directory still exists.");
			
			return Success;
		</Code>
	</Test>
	<Test Name="UnlinkAtNameTooLong">
		<Description>Pathname is too long.</Description>
		<Dir count="1"/>
		<Code>
			ENameTooLongTest(unlinkat(DirDs[0], path, 0), -1);
		</Code>
	</Test>
	<Test Name="UnlinkAtNotDir">
		<Description>A component used as a directory in pathname is not, in fact, a directory.</Description>
		<Dir count="1">
			<File count="1"/>
		</Dir>
		<Code>
			string FileNameOnly = DirFilePaths[0].substr(DirPaths[0].length() + 1, DirFilePaths[0].length());
			
			ErrorTest(unlinkat(DirDs[0], (FileNameOnly + "/some_file").c_str(), 0), -1, ENOTDIR);
		</Code>
	</Test>
	<Test Name="UnlinkAtNotExist">
		<Description>File does not exist.</Description>
		<Dir count="1"/>
		<Code>
			ErrorTest(unlinkat(DirDs[0], "non_existing_file", 0), -1, ENOENT);
		</Code>
	</Test> 
	<Test Name="UnlinkAtEmptyPath">
		<Description>Path is an empty string.</Description>
		<Dir count="1"/>
		<Code>
			ErrorTest(unlinkat(DirDs[0], "", 0), -1, ENOENT);
		</Code>
	</Test> 
	<Test Name="UnlinkAtNegativeAddress">
		<Description>Path has a negative address.</Description>
		<Dir count="1"/>
		<Code>
			ErrorTest(unlinkat(DirDs[0], reinterpret_cast<char*>(-1), 0), -1, EFAULT);
		</Code>
	</Test>
	<FaultSimulation>
		<Simulate point="kmalloc" count="1" />
		<Simulate point="kmem_cache_zalloc"  coutn="1"/> 
		<Simulate point="kfree" count="1" />
		<Simulate point="kmem_cache_free" count="2" /> 
	</FaultSimulation>
</TestSet>
