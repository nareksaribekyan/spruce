<!--    lchown.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//			Gurgen Torozyan <gurgen.torozyan@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="lchown">	
	<Test Name="LchownNormal" FaultSimulationReady="true">
		<Description>Change ownership of a file.</Description>
		<File count="1" />
		<Code>
			int ret_chown;
			struct stat mode;
			struct passwd *nobody;
			int ret ;
			uid_t user_uid;
			gid_t user_gid;
			
			nobody= getpwnam("nobody");
			Unres(nobody == NULL, "getpwnam failed: Aborting test.");
			
			//getting user  and group id for nobody user.
			user_uid = nobody->pw_uid;
			user_gid = nobody->pw_gid;

			EnableFaultSim();
			//changing owner  from root to nobody 
			ret_chown = lchown(FilePaths[0].c_str(), user_uid,user_gid);
			
			Fail(ret_chown == -1, "Lchown failed.");
				
				
			ret = stat(FilePaths[0].c_str(), &mode);
			Unres( ret == -1, "stat failed: Aborting test.");
			
			if( user_uid != mode.st_uid )
			{
				Error("Lchown failed : lchown should chenge file owner from root to nobody but it does not.", Fail);
			}
			
			if( user_gid != mode.st_gid )
			{
				Error("Lchown failed : lchown should chenge group  from root to nobody but it does not.",  Fail);
			}
		
			return Success;
		</Code>
	</Test>
	<Test Name="LchownSymlink" FaultSimulationReady="true">
		<Description>lchown() is like chown(), but does not dereference symbolic links.</Description>
		<File count="1"/>
		<Code>
			struct stat stat_old, stat_new;
			Unres(fstat(FDs[0], &stat_old) == -1, "Cannot get stat before lchown.");
			
			Unres( symlink(FilePaths[0].c_str(), "symlink") == -1, "Cannot create symbolic link." );
			
			Unres( lchown("symlink", stat_old.st_uid, stat_old.st_gid) == -1, "Cannot change owner on symlink." );
			
			Unres(fstat(FDs[0], &stat_new) == -1, "Cannot get stat after lchown.");
			
			if ( stat_old.st_uid != stat_new.st_uid || stat_old.st_gid != stat_new.st_gid )
			{
				Error("Owner of the original file was changed.", Fail);
			}
			return Success;
		</Code>
	</Test>
	<Test Name="LchownIsNotDirectory">
		<Description>A component of the path prefix is not a directory.</Description>
		<File count="1" />
		<Code>
			ENotDirTest(lchown(path, 0,0), -1);
		</Code>
	</Test>
	<Test Name="LchownTooLongPath">
		<Description>path is too long.</Description>
		<Code>
			ENameTooLongTest(lchown(path, 0,0), -1);
		</Code>
	</Test>
	<Test Name="LchownFileNotExist">
		<Description>The file does not exist.</Description>
		<Code>
			ErrorTest(lchown("non_existing_file", 0, 0), -1, ENOENT);
		</Code>
	</Test>
	
</TestSet>
