<!--    stat.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//			Suren Grigoryan <suren.grigoryan@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="stat">
	<Test Name="StatNormal" FaultSimulationReady="true">
		<Description>Get file status.</Description>
		<File count="1" mode="S_IRUSR" flags="O_CREAT | O_RDONLY"/>
		<Code>
			struct stat st;
			EnableFaultSim();
			Fail(stat(FilePaths[0].c_str(), &st) == -1, "Failed to get file status.");
			
			Fail(st.st_uid != getuid(), "User IDs do not match.");
			Fail((st.st_mode & 0777) != S_IRUSR, "File permissions do not match.");
			
			Return(Success);
		</Code>
	</Test>
	<Test Name="StatNoAccess">
		<Description>Search permission is denied for one of the directories in the path prefix of path.</Description>
		<Dir count="1">
			<File count="1"/>
		</Dir>
		<Code>
			struct stat st;
			Unres( chmod(DirPaths[0].c_str(), 0000)==-1, "Cannot change directory permissions." );
			
			ENoAccessTest( stat( DirFilePaths[0].c_str(), &st ), -1 );
		</Code>
	</Test>
	<!-- Removed as it is not clear about the bad addresses in man page. Depends on the realization of the libc
	<Test Name="StatFault">
		<Description>Bad address.</Description>
		<Code>
			ErrorTest( stat( ".", reinterpret_cast<struct stat*>(-1) ), -1, EFAULT );
		</Code>
	</Test -->
	<Test Name="StatLoop">
		<Description>Too many symbolic links encountered while traversing the path.</Description>
		<File count="1"/>
		<Code>
			struct stat st;
			ELoopTest( stat( FilePaths[0].c_str(), &st ), -1 );
		</Code>
	</Test>
	<Test Name="StatNameTooLong">
		<Description>File name too long.</Description>
		<File count="1"/>
		<Code>
			struct stat st;
			ENameTooLongTest( stat( path, &st ), -1 );
		</Code>
	</Test>
	<Test Name="StatNoEnt1">
		<Description>A component of path does not exist.</Description>
		<Code>
			struct stat st;
			ErrorTest( stat( "non_existing_file", &st ), -1, ENOENT );
		</Code>
	</Test>
	<Test Name="StatNoEnt2">
		<Description>Path is an empty string.</Description>
		<Code>
			struct stat st;
			ErrorTest( stat( "", &st ), -1, ENOENT );
		</Code>
	</Test>
	<Test Name="StatNotDir">
		<Description>A component of the path prefix of path is not a directory.</Description>
		<File count="1"/>
		<Code>
			struct stat st;
			ENotDirTest( stat( path, &st ), -1 );
		</Code>
	</Test>
</TestSet>
