<!--    link.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//			Nellie Danielyan <Nellie.92.d@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="symlink">	
	<Test Name="SymlinkNormal" FaultSimulationReady="true">
		<Description>Create a symlink of a file.</Description>
		<File count="1"/>
		<Code>
			const char * NewFilePath = "new_file";
			const char * OrigBuf = "asdf";
			char NewBuf[10];
			unlink(NewFilePath);
			EnableFaultSim();
			Fail(symlink(FilePaths[0].c_str(), NewFilePath) == -1, "Cannot create link.");
			
			Unres( write(FDs[0], OrigBuf, strlen(OrigBuf)) != static_cast<int>(strlen(OrigBuf)), "Error in writing to original file." );
			
			File new_file(NewFilePath, 0777, O_RDONLY);
			
			Unres( read(new_file.GetFileDescriptor(), NewBuf, strlen(OrigBuf)) != static_cast<int>(strlen(OrigBuf)), "Error reading data from new file." );
			
			if ( strncmp(OrigBuf, NewBuf, strlen(OrigBuf)) != 0 )
			{
				Error("Different data was retrieved from the new file.", Fail);
			}

		</Code>
	</Test>
	<Test Name="SymlinkDangling" FaultSimulationReady="true">
		<Description>Create a symlink of a non-exitsting file.</Description>
		<Code>
			const char * OldFilePath = "old_file";
			const char * NewFilePath = "new_file";
			unlink(NewFilePath);
			EnableFaultSim();
			Fail(symlink(OldFilePath, NewFilePath) == -1, "Cannot create link.");

		</Code>
	</Test>
	<Test Name="SymlinkLongName" FaultSimulationReady="true">
		<Description>Create a symlink of a file with a long path.</Description>
		<Code>
			int NameLength =  PATH_MAX - strlen(MountPoint)-1;
			char * OldFilePath = new char[PATH_MAX];
			for(int i = 0; i < NameLength; ++i)
			{
				OldFilePath[i] = 'a';
			}
			const char * NewFilePath = "new_file";
			unlink(NewFilePath);
			EnableFaultSim();
			Fail(symlink(OldFilePath, NewFilePath) == -1, "Cannot create link.");

		</Code>
	</Test>
	<Test Name="SymlinkNameTooLong">
		<Description>Oldpath or newpath was too long.</Description>
		<Code>
			ENameTooLongTest(symlink("/", path), -1);
		</Code>
	</Test>
	<Test Name="SymlinkNewPathAlreadyExist">
		<Description>Newpath already exists.</Description>
		<Code>
			ErrorTest(symlink("/", "/"), -1, EEXIST);
		</Code>
	</Test>
	<Test Name="SymlinkIsNotDirectory">
		<Description>A component used as a directory in oldpath or newpath is not, in fact, a directory.</Description>
		<File count="1"/>
		<Code>			
			ENotDirTest(symlink(FilePaths[0].c_str(), path), -1);
		</Code>
	</Test>

</TestSet>
