<!--    quotactl.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="quotactl">
	<GlobalHeader>
#if QUOTA_ENABLED != 1
	EmptyTestSet(syscall, quotactl, Unsupported, "quota-tools are not installed.")
#else	
	</GlobalHeader>
	<Requires>sys/quota.h</Requires>	
	<Header>
// QFMT_VFS_V0 is defined in linux/quota.h. On 64-bit systems this file cannot be included
// because quotactl is defined in different ways in those files...
#ifndef QFMT_VFS_V0
#define QFMT_VFS_V0 2
#endif	
			char * opts = NULL;
			opts = getenv("MountOpts");
			string strOpts = opts;
			string QuotaFile = MountPoint;
			int cmd_on;
			int cmd_off;
			UnixCommand* quotacheck;
			ProcessResult * res;
			vector<string> args;
			if ( opts != NULL )
			{
				if ( strOpts.find("quota") == string::npos || PartitionManager::IsOptionEnabled("noquota"))
					Unsupp("quota mount option is not provided.");
				if ( strOpts.find("vfsold") != string::npos )
					Unsupp("vfsold quota format not supported.");
			}
			else
				Unsupp("quota mount option is not provided.");
				
				
			Unres( strcmp(DeviceName, "") == 0, "No device name is provided." );
			Unres( strcmp(MountPoint, "") == 0, "No mount point is provided." );
			Unres( strcmp(FileSystem, "") == 0, "No file system name is provided." );
			if ( ! strcmp(FileSystem, "xfs") )
				Unsupp("Quota tests for XFS are implemented in XFS-specifiec module.");
			
			if( PartitionManager::IsOptionEnabled("usrquota") || PartitionManager::IsOptionEnabled("quota") || 
						strOpts.find("usrjquota") != string::npos )
			{
				cmd_on = QCMD(Q_QUOTAON, USRQUOTA);
				cmd_off = QCMD(Q_QUOTAOFF, USRQUOTA);
			}
			else
			{
				cmd_on = QCMD(Q_QUOTAON, GRPQUOTA);
				cmd_off = QCMD(Q_QUOTAOFF, GRPQUOTA);
			}
			
			// Create the quota files
			quotacheck = new UnixCommand(QUOTACHECK_PATH);
			
			args.push_back("-c");
			args.push_back("-u");
			args.push_back("-g");
			//args.push_back("-F");
		//	args.push_back("vfsold");
			args.push_back(MountPoint);
			
			res = quotacheck->Execute(args);
			delete quotacheck;
			Unres( res == NULL, "Cannot execute 'quotacheck' command to create the quota file." );
		//	Unres( res->GetStatus() != Success, "Error executing 'quotacheck'. " + res->GetOutput() );
			
			
			
			if( PartitionManager::IsOptionEnabled("usrquota") || PartitionManager::IsOptionEnabled("quota") ||
						strOpts.find("usrjquota") != string::npos )
			{
				QuotaFile += "/aquota.user";
			}
			else
			{
				QuotaFile += "/aquota.group";
			}
	</Header>
	<Test Name="QuotactlQuotaOnOff" FaultSimulationReady="true">
		<Description>Turn on and off quotas for a file system.</Description>		
		<Code>
			EnableFaultSim();
			Fail( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			Fail( quotactl(cmd_off, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot disable quotas V0." );
			
			;
		</Code>
	</Test>
	<Test Name="QuotactlGetSetQuota" FaultSimulationReady="true">
		<Description>Set and get quota information for user or group id.</Description>		
		<Code>
			int cmd_get_quota;
			int cmd_set_quota;
			if(PartitionManager::IsOptionEnabled("usrquota") || PartitionManager::IsOptionEnabled("quota") ||
						strOpts.find("usrjquota") != string::npos )
			{
				cmd_get_quota = QCMD(Q_GETQUOTA, USRQUOTA);
				cmd_set_quota = QCMD(Q_SETQUOTA, USRQUOTA);
			}
			else
			{
				cmd_get_quota = QCMD(Q_GETQUOTA, GRPQUOTA);
				cmd_set_quota = QCMD(Q_SETQUOTA, GRPQUOTA);
			}
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			struct dqblk quota_data, quota_data2;
			memset(&quota_data, 0, sizeof(quota_data));
			memset(&quota_data2, 0, sizeof(quota_data2));
			
			quota_data.dqb_bhardlimit = 1000;
			quota_data.dqb_valid = QIF_BLIMITS;
			EnableFaultSim();
			Fail( quotactl(cmd_set_quota, DeviceName, 0, reinterpret_cast<caddr_t>(&quota_data) ) == -1, "Cannot set quota." );
			
			Fail( quotactl(cmd_get_quota, DeviceName, 0, reinterpret_cast<caddr_t>(&quota_data2) ) == -1, "Cannot get quota." );
			
			Fail( quota_data.dqb_bhardlimit != quota_data2.dqb_bhardlimit, "Different values after set-get operation." );
			
			if ( quotactl(cmd_off, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1)
				cerr << "Cannot disable quotas V0.";
			
			;
		</Code>
	</Test>
	<Test Name="QuotactlGetSetQuotaInfo" FaultSimulationReady="true">
		<Description>Set and get information about quotafile.</Description>		
		<Code>	
			int cmd_get_info;
			int cmd_set_info;
			if(PartitionManager::IsOptionEnabled("usrquota") || PartitionManager::IsOptionEnabled("quota") || 
						strOpts.find("usrjquota") != string::npos )
			{
				cmd_get_info = QCMD(Q_GETINFO, USRQUOTA);
				cmd_set_info = QCMD(Q_SETINFO, USRQUOTA);
			}
			else
			{
				cmd_get_info = QCMD(Q_GETINFO, GRPQUOTA);
				cmd_set_info = QCMD(Q_SETINFO, GRPQUOTA);
			}
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			struct dqinfo quota_info, quota_info2;
			memset(&quota_info, 0, sizeof(quota_info));
			memset(&quota_info2, 0, sizeof(quota_info2));
			
			quota_info.dqi_bgrace = 100;
			quota_info.dqi_valid = IIF_BGRACE;
			EnableFaultSim();
			Fail( quotactl(cmd_set_info, DeviceName, 0, reinterpret_cast<caddr_t>(&quota_info) ) == -1, "Cannot set info." );
			
			Fail( quotactl(cmd_get_info, DeviceName, 0, reinterpret_cast<caddr_t>(&quota_info2) ) == -1, "Cannot get info." );
			
			Fail( quota_info.dqi_bgrace != quota_info2.dqi_bgrace, "Different values after set-get operation." );
			
			if ( quotactl(cmd_off, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1)
				cerr << "Cannot disable quotas V0.";
			
			;
		</Code>
	</Test>
	<Test Name="QuotactlGetFormat" FaultSimulationReady="true">
		<Description>Get quota format used on the specified file system.</Description>		
		<Code>
			int cmd_get_format;
			int format;
			if(PartitionManager::IsOptionEnabled("usrquota") || PartitionManager::IsOptionEnabled("quota") || 
						strOpts.find("usrjquota") != string::npos )
			{
				cmd_get_format = QCMD(Q_GETFMT, USRQUOTA);
			}
			else
			{
				cmd_get_format = QCMD(Q_GETFMT, GRPQUOTA);
			}
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			EnableFaultSim();
			Fail( quotactl(cmd_get_format, DeviceName, 0, reinterpret_cast<caddr_t>(&format) ) == -1, "Cannot get format." );
			
			Fail( format != QFMT_VFS_V0, "Format value is not correct" );
			
			if ( quotactl(cmd_off, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1)
				cerr << "Cannot disable quotas V0.";
			
		</Code>
	</Test>
	<Test Name="QuotactlSync" FaultSimulationReady="true">
		<Description>Update the on-disk copy of quota usages for a file system.</Description>		
		<Code>
			_TestStatus = Shallow;
			int cmd_sync = QCMD(Q_SYNC, USRQUOTA);
			EnableFaultSim();
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			Fail( quotactl(cmd_sync, DeviceName, 0, 0 ) == -1, "Cannot sync." );
			
			if ( quotactl(cmd_off, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1)
				cerr << "Cannot disable quotas V0.";
			
		</Code>
	</Test>
	<GlobalFooter>
#endif
	</GlobalFooter>
</TestSet>
