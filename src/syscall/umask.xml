<!--    umask.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
// 			Tigran Piloyan <tigran.piloyan@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="umask">	
	<Test Name="UmaskNormal" FaultSimulationReady="true">
		<Description>umask()  sets  the calling process's file mode creation mask (umask) to mask and 0777 (i.e., only the file permission bits of mask are used), and returns the previous value of the mask.</Description>
		<Code>
			struct stat statbuf;
			unsigned mode;
			mode_t retMask;
			bool firstCallSkiped = false;
			mode_t file_mode = 0777; 
			for(mode_t setMask = 0077; setMask < 100; ++setMask)
			{
				DisableFaultSim();
				if(firstCallSkiped)
				{
					int fd = open("testfile", O_CREAT, file_mode);
					Unres(fd == -1, "Unable to create file");
					Fail(retMask != setMask - 1, "Returned by the function mask is wrong");					
					if(fstat(fd, &statbuf) != 0) 
					{
						unlink("testfile");
						Unres(true, "Cannot fstat file.");
					}
					mode = statbuf.st_mode & 0777; 
					if (mode != (~setMask & file_mode))
					{
						unlink("testfile");
						Fail(true, "Wrong mask is set");
					}
					file_mode--;
					Unres( unlink("testfile") == -1, "Unable to unlink file."); 
					firstCallSkiped = true;
				}
				
				EnableFaultSim();
				retMask = umask( setMask );
			
			}
			;
		</Code>
	</Test>
</TestSet>
