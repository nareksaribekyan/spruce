<!--    Acl.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
// 			Nellie Danielyan <Nellie.92.d@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="Acl">	
	<Requires>sys/acl.h</Requires>
	<Requires>attr/xattr.h</Requires>	
	<Test Name="ACLSetShort" FaultSimulationReady="true">
		<Description>Intialize a short ACL.</Description>		
		<Dir count="1" />
		<Code>
			acl_t acl = acl_init(4);
			acl_entry_t entry = NULL;
			int res;
			acl_tag_t tagType[] = {ACL_USER_OBJ,ACL_GROUP_OBJ,ACL_OTHER,0};
			acl_permset_t perms = NULL;
			Unres(acl == NULL, "Cannot initialize ACL working storage.");
			for(int i = 0; i < 3; i++)
			{
				Unres( acl_create_entry(&acl, &entry) == -1, "Cannot create ACL entry." );
				Unres( acl_get_permset(entry, &perms) == -1, "Cannot get permition set" ); 
				Unres( acl_add_perm(perms, ACL_READ) == -1, "Cannot add permitions to a permision set" ); 
				Unres( acl_set_permset(entry, perms) == -1, "Cannot set permition set to an entry" ); 
				Unres( acl_set_tag_type(entry, tagType[i]) == -1, "Cannot set tag type to an entry" ); 		
			}
			Fail(acl_set_file(DirPaths[0].c_str(),ACL_TYPE_DEFAULT,acl) == -1,"Cannot set file access ACL" );
			close(DirDs[0]);
			Unres ( chdir("/") == -1, "Cannot change directory." );
			res = PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem);
			if( res!= PS_Success )
			{
				Unres( res == PS_Fatal, "Device too small." );						
				Unres( 1, "Partition mount or umount failed." );
			}
		
			Unres ( chdir(MountPoint) == -1, "Cannot change directory." );
			
			string FilePath = DirPaths[0] + "/some_file";
			
			int fd;
			Unres( (fd = creat(FilePath.c_str(), 0777)) == -1, "Cannot create file.");
			Unres ( fchmod(fd, 0666) == -1, "Cannot chmod file");
			close(fd);
			unlink(FilePath.c_str());
			Check ( ( acl = acl_get_file(DirPaths[0].c_str(),ACL_TYPE_DEFAULT) ) == NULL, "Cannot get file's access ACL." );
			acl_free(acl);
		</Code>		
	</Test>
</TestSet>
