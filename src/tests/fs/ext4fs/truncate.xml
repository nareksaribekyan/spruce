<!--    truncate.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Nellie Danielyan <Nellie.92.d@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="truncate">	
	<StartUp>
		Skip ( !PartitionManager::NoOptionsEnabled()
				&amp;&amp; !PartitionManager::IsOptionEnabled("-j", true),
			"These tests should run only when no options are provided." );
	</StartUp>
	<Test Name="TruncateNormalIncreaseALot" FaultSimulationReady="true">
		<Description>Truncate a file to a great size and then back to initial.</Description>
		<File count="1"/>
		<Code>
			const string buf = "1234";
			const int length = buf.size();
			int length_after_truncate = 5000000;
			
			Unres ( write(FDs[0], buf.c_str(), length) != length, "Cannot write  to the file.");
			
			Fail ( truncate(FilePaths[0].c_str(), length_after_truncate) != 0, "truncate failed");
			Fail ( truncate(FilePaths[0].c_str(), 1) != 0, "truncate failed");
		</Code>
	</Test>
		<Test Name="xtTruncate" FaultSimulationReady="true">
		<Description>Covers JFS xtTruncate and related functions.</Description>
		<Code>
			system("rm -rf /tmp/spruce_test/*");
			int count = 0;
		
			File f("test");
			int fd = f.GetFileDescriptor();
		
			char buf[10000];
			for (int i = 0 ; i < 80000; ++i)
			{
				Unres( lseek64(fd, 10000, SEEK_CUR) == -1, "Cannot seek.");
				
				Unres (write(fd, buf, 100) == -1, "Cannot write.");
			}
		
			fsync(fd);
			
			int size = 256*10000;
	
			while ( size )
			{
				Unres(ftruncate(fd, size) == -1, "Cannot trunacte.");
				size -= 1000;
			}
	again:			
			for (int i = 0 ; i < 256; ++i)
			{
				Unres( lseek64(fd, 10000, SEEK_CUR) == -1, "Cannot seek.");
				
				Unres (write(fd, buf, 5000) == -1, "Cannot write.");
			}
		
			fsync(fd);
			
			size = 256*10000;
	
			while ( size )
			{
				Unres(ftruncate(fd, size) == -1, "Cannot trunacte.");
				size /= 2;
			}
			
			for (int i = 0; i < 256; ++i)
			{
				Unres( lseek64(fd, 10000, SEEK_CUR) == -1, "Cannot seek.");
				
				Unres (write(fd, buf, 5000) == -1, "Cannot write.");
			}
		
			fsync(fd);
			
			Unres(ftruncate(fd, 100) == -1, "Cannot trunacte.");
			
			for (int i = 0; i < 256; ++i)
			{
				Unres( lseek64(fd, 10000, SEEK_CUR) == -1, "Cannot seek.");
				
				Unres (write(fd, buf, 5000) == -1, "Cannot write.");
			}
		
			fsync(fd);
			
			if ( count == 0)
			{
			
				Unres(system("touch test1") != 0, "Cannot create file test1.");
				
				Unres(rename("test1", "test") == -1, "Cannot rename file.");
				
				count++;
				goto again;
			}
			
		</Code>
	</Test>
</TestSet>
