<!--    ReadWrite.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
// 			Nellie Danielyan <Nellie.92.d@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="ReadWrite">	
	<Requires>sys/timerfd.h</Requires>
	<Requires>sys/mman.h</Requires>
	<Test Name="ReadWriteDirect" FaultSimulationReady="true">
		<Dangerous check="stability" fs="ext4"/>
		<Description>Try  to  minimize cache effects of the I/O to and from this file.</Description>
		<File count="1" flags="O_CREAT | O_RDWR | O_DIRECT"/>
		<Code>
			const int BlockSize = 512;
			char* WriteBuf = new char[3*BlockSize];
			// Align to block size
			char * WriteStart = reinterpret_cast<char*>(((reinterpret_cast<long>(WriteBuf) / BlockSize) + 1) * BlockSize);
			WriteStart[0] = 'A';
			
			char* ReadBuf = new char[2*BlockSize];
			char * ReadStart = reinterpret_cast<char*>(((reinterpret_cast<long>(ReadBuf) / BlockSize) + 1) * BlockSize);
			
			Check ( write(FDs[0], WriteStart, 2*BlockSize) == -1, "Cannot write to file.");
			
			Unres(lseek(FDs[0], SEEK_SET, 0) == -1, "Cannot seek to the beginning of file.");
			Check ( write(FDs[0], WriteStart, 2*BlockSize) == -1, "Cannot write to file.");
			Unres(lseek(FDs[0], SEEK_SET, 0) == -1, "Cannot seek to the beginning of file.");		
			Check ( read(FDs[0], ReadStart, BlockSize) == -1, "Cannot read from file.");
			
			Check ( ReadStart[0] != WriteStart[0], "Different values were written and read.");
		</Code>
	</Test>
</TestSet>
