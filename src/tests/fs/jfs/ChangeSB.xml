<!--    OverloadTests.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Nellie Danielyan <Nellie.92.d@gmail.com>
//
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->
<TestSet Name="ChangeSB">
	<Requires>dirent.h</Requires>	
	<Test Name="JFS_DIR_INDEX" FaultSimulationReady="true">
		<Description>Unset JFS_DIR_INDEX flag and read a directory.</Description>
		<Code>
			jfs_superblock sb;
			string DirToReadPath = "Dir_to_read";
			string FilePath = DirToReadPath + "/some_file";
			string DirPath = DirToReadPath + "/some_dir";
			int fd;
			DIR *dir;
			Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
			Unres ( chdir("/") == -1, "Cannot change directory." );
			Unres( !PartitionManager::ReleasePartition(MountPoint), "Cannot unmount.")
			Unres(!PartitionManager::GetSuperBlock(&sb,sizeof(sb)),"Cannot read superblock.");
			//sb.s_flag &= ~0x00200000;//JFS_DIR_INDEX
			Unres(!PartitionManager::SetSuperBlock(&sb,sizeof(sb)),"Cannot write superblock.");
			Unres(mkdir(DirToReadPath.c_str(), 0444) == -1, "Cannot create directory");
			Unres(mkdir(DirPath.c_str(), 0444) == -1, "Cannot create directory");
			Unres((fd = creat(FilePath.c_str(), 0777)) == -1, "Cannot create file.");
			dir = opendir(DirToReadPath.c_str());
			Unres(!dir, "Cannot open directory.");
			errno = 0;
			while(readdir(dir))
			{
				Fail(errno, "Cannot read directory.");			
			}
			closedir(dir);
			close(fd);
			rmdir(DirPath.c_str());
			unlink(FilePath.c_str());
			rmdir(DirToReadPath.c_str());
			Fatal( PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem,true)!= PS_Success,"Mount failed" );
			
		</Code>
	</Test>
	<Test Name="ciOperations" FaultSimulationReady="true">
		<Description>Set JFS_OS2 flag.</Description>
		<Code>
			jfs_superblock sb;
			string FilePath = DirPrefix +"1";
			string DirPath = DirPrefix + "2";
			int fd;
			const char * NewFileName = "FileRenameNormal";
			const char * NewDirName = "DirRenameNormal";		
			Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
			Unres ( chdir("/") == -1, "Cannot change directory." );
			Unres( !PartitionManager::ReleasePartition(MountPoint), "Cannot unmount.")
			Unres(!PartitionManager::GetSuperBlock(&sb,sizeof(sb)),"Cannot read superblock.");
			sb.s_flag |= 0x40000000;//JFS_OS2
			Unres(!PartitionManager::SetSuperBlock(&sb,sizeof(sb)),"Cannot write superblock.");
			Unres ( chdir(MountPoint) == -1, "Cannot change directory." );
			Unres(mkdir(DirPath.c_str(), 0444) == -1, "Cannot create directory");
			if((fd = creat(FilePath.c_str(), 0777)) == -1)
			{
				rmdir(DirPath.c_str());
				Unres(1, "Cannot create file.");
			}
				
			if(  rename(FilePath.c_str(), NewFileName) == -1)
			{
				rmdir(DirPath.c_str());
				unlink(FilePath.c_str());
				Fail(1, "Rename failed.");
			}
			if( rename(DirPath.c_str(), NewDirName) == -1)
			{
				rmdir(DirPath.c_str());
				unlink(FilePath.c_str());
				Fail(1, "Rename failed.");
			}	
			close(fd);
			rmdir(DirPath.c_str());
			unlink(FilePath.c_str());
			Fatal( PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem,true)!= PS_Success,"Mount failed" );
			
		</Code>
	</Test>
</TestSet>
