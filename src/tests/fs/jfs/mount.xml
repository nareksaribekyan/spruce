<!--    mount.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//            Nellie Danielyan <Nellie.92.d@gmail.com>
//          Vahram Martirosyan <vmartirosyan@gmail.com>
//          Karen Tsirunyan <ktsirunyan@gmail.com>
//            Ruzanna Karakozova <r.karakozova@gmail.com>
//
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<!--Test set covers most of JFS resize.c and some of dmap.c code
(the functions called from resize.c which weren't called before.)
It seems the part of resize.c refering to invalid block number checks 
isn't covered as mount options are parsed and checked in super.c-->
<TestSet Name="mount" mount-oriented="false">
    <StartUp>
        Skip ( !PartitionManager::NoOptionsEnabled()
                &amp;&amp; !PartitionManager::IsOptionEnabled("-j", true),
            "Testset mount is executed only when no options are provided or with journal enabled." );
    </StartUp>
        <Requires>sys/mount.h</Requires>
        <Requires>sstream</Requires>
        <Requires>JFSCtl.hpp</Requires>
        <Test Name="RemountResize">
            <Description>Resize.</Description>              
            <Code>
                int res;
                res = PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem, true, true);
                if( res!= PS_Success )
                {
                    if( res == PS_Fatal )
                    {
                        Error("Device too small.");
                        Return(Unresolved);
                    }                        
                    Error("Partition mount or umount failed");
                    Return(Unresolved);    
                }
                            
                Fail( mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "resize") == -1, "Mount failed.");                    
            </Code>
        </Test>
        <Test Name="RemountResizeModifyIAG" FaultSimulationReady="true">
                <Description>Resize.</Description>              
                <Code>
                        int res;
                        JFSCtl jfs(DeviceName);
                        res = PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem, true, true);
                        if( res!= PS_Success )
                        {
                            if( res == PS_Fatal )
                            {
                                Error("Device too small.");
                                Return(Unresolved);
                            }                        
                            Error("Partition mount or umount failed");
                            Return(Unresolved);    
                        }
                        Unres(chdir(MountPoint) == -1, "Cannot chdir to mount point.");
                        int fd = creat("a",0777);
                        fsync(fd);
                        int inode_num = jfs.GetInodeNum("a");
                        close(fd);

                        Unres(PartitionManager::ReleasePartition(MountPoint) == false, "Cannot release partition.");
                        
                        
                        iag iag;
                        jfs.GetIAG(inode_num, &iag);

                        iag.nfreeexts = EXTSPERIAG;
                        jfs.SetIAG(inode_num, &iag);
                        
                        Unres(PartitionManager::Mount(DeviceName, MountPoint, FileSystem, "", 0) == false, "Cannot mount partition back.");
            
                        Unres(chdir(MountPoint) == -1, "Cannot chdir to mount point.");
            
                        mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "resize");                    
                </Code>
        </Test>
        <Test Name="MultipleResize" FaultSimulationReady="true">
			<Dangerous check="stability" />
            <Description>Multiple resize.</Description>
            <Code>
                uint64_t DeviceSize = PartitionManager::GetDeviceSize(DeviceName);
                
                uint64_t PartSize = DeviceSize / 20;
                
                uint64_t PartSizeInBlocks = PartSize / 4096;
                
                stringstream str;
                str << PartSizeInBlocks;
                
                MkfsCommand cmd("mkfs.jfs");
                
                vector<string> args;
                args.push_back(DeviceName);
                args.push_back("-f");
                args.push_back(str.str());
                
                ProcessResult * res = cmd.Execute(args);
                
                Unres( res == NULL || res->GetStatus() != Success, "Cannot create partition. " + res->GetOutput() );
                
                delete res;
                
                Unres(PartitionManager::Mount(DeviceName, MountPoint, FileSystem, "", 0) == false,
                        "Cannot mount partition.");
                
                for ( int i = 0; i < 20; ++i ) // Must be more than 18 (XTROOTMAXSLOT)
                {
                    stringstream newsize;
                    newsize << (PartSizeInBlocks + i*10000);
                    Fail(mount(DeviceName, MountPoint, FileSystem, MS_REMOUNT, ("resize=" + newsize.str()).c_str()) == -1,
                        "Cannot extend partition.");
                }
            </Code>
        </Test>
         <Test Name="MountResize" use-mkfs="true">
            <Description>Try to resize without remount flag.</Description>              
            <Code>
                    Fail(mount( DeviceName, MountPoint, FileSystem, 0, "resize") != -1, "Mount didn't fail on resize without remount.");
            </Code>
        </Test>
         <Test Name="RemountResizeRO" use-mount="true">
                <Description>Resize read-only filesystem.</Description>              
                <Code>
                        //TODO: change ro-remount to clean mount(and change test attribute)
                        Unres( mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT | MS_RDONLY, 0) == -1, "Mount failed.");

                        Fail( mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "resize") != -1, "Mount didn't fail on readonly filesystem.");
                </Code>
        </Test>

         <Test Name="RemountResizeWrong" use-mount="true">
                <Description>Resize error cases.</Description>
                <Code>
                        uint64_t size = PartitionManager::GetDeviceSize(DeviceName)+100;
                        stringstream ss;
                        ss << size;
                        mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, ("resize=" + ss.str()).c_str());
                        mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "resize=1");
                        // Error may be hitted on umount
                </Code>
        </Test>
        <Test Name="WrongErrorOption" use-mount="true">
            <Description>Remount with wrong option value.</Description>
            <Code>
                Check(mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "errors=unknown") != -1,
                    "Remount didn't fail with wrong value of 'errors' option.");
            </Code>
        </Test>
        
        <Test Name="WrongIOCharset" use-mount="true">
            <Description>Mount with wrong charset.</Description>
            <Code>
                Check(mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "iocharset=unknown") != -1,
                    "Remount didn't fail with wrong value of 'iocharset' option.");
            </Code>
        </Test>
        
        <Test Name="WrongUmask" use-mount="true">
            <Description>Mount with wrong umask.</Description>
            <Code>
                Check( mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "umask=07777") != -1,
                    "Remount didn't failt with wrong value of 'umask' option");
            </Code>
        </Test>
        
        <Test Name="NoIntegrityOption" use-mkfs="true">
            <Dangerous/>
            <Description>Mount with nointegrity option</Description>
            <Code>                
                //TODO: Correctly process module unloading
                //system("rmmod jfs.ko");
                EnableFaultSim();
                mount(DeviceName, MountPoint, FileSystem, 0, "nointegrity");
                DisableFaultSim();
            </Code>
        </Test>        
        <Test Name="MultipleExternalLogs" per-mount-options="false">
            <Dev count="3"/>
            <Description>Create multiple jfs partiotions with external log</Description>
            <Header>
                string ExtJournalName = DevPaths[0];
               
                string Device1 = DevPaths[1];
                string ExtJournalName1 = DevPaths[2];
                const char* MountPoint1 = "/tmp/MultipleExternalLogs_MountPoint1";
            </Header>
            <Code>
                //TODO: Process module unloading or remove that unloading
                //system("rmmod jfs.ko");
               
                Unres(mkdir(MountPoint1, S_IRUSR | S_IWUSR) == -1 && errno != EEXIST, "Cannot create mount directory for second filesystem");
               
                Unres(!PartitionManager:: CreateFilesystem(FileSystem, DeviceName, false, string("-j ") + ExtJournalName), "Failed to create filesystem");
                Unres(!PartitionManager:: CreateFilesystem(FileSystem, Device1, false, string("-j ") + ExtJournalName1), "Failed to create second filesystem");
                               
                Unres(mount(DeviceName, MountPoint, FileSystem, 0, "") == -1, "Failed to mount");
                Unres(mount(Device1.c_str(), MountPoint1, FileSystem, 0, "") == -1, "Failed to mount second filesystem");
            </Code>
            <Footer>
                Fatal(umount(MountPoint) == -1 && errno != EINVAL, "Failed to release partition");
                
                Fatal(umount(MountPoint1) == -1 && errno != EINVAL, "Failed to release second partition");
                Fatal(rmdir(MountPoint1) == -1 && errno != EINVAL, "Failed to remove mount directory for second partition");
            </Footer>
        </Test>
        <Test Name="SingleExternalLog" per-mount-options="false">
            <Description>Create and mount jfs partiotion with external log</Description>
            <Dev/>
            <Code>
                //TODO: Process module unloading or remove that unloading
                //system("rmmod jfs.ko");
               
                string ExtJournalName = DevPaths[0];
                              
                Unres(!PartitionManager:: CreateFilesystem(FileSystem, DeviceName, false, string("-j ") + ExtJournalName), "Failed to create filesystem");
                
                Fail(mount(DeviceName, MountPoint, FileSystem, 0, "") == -1, "Mount failed");
            </Code>
            <Footer>
                Fatal(umount(MountPoint) == -1 && errno != EINVAL, "Failed to release second partition");
            </Footer>
        </Test>

        <!--This test causes fatal error, because of BUG-->
        <!--Test covers code in jfs/jfs_logmgr.c file-->
        <Test Name="MultiplePartitionsSingleLog" per-mount-options="false">
        <Dangerous/>
            <Description>Create multiple jfs partiotions with single external log</Description>
            <Dev count="2"/>
            <Header>
                string ExtJournalName = DevPaths[0];
               
                string Device1 = DevPaths[1];
                const char* MountPoint1 = "/tmp/MultipleExternalLogs_MountPoint1";
            </Header>
            <Code>
                //TODO: Process module unloading or remove that unloading
                //system("rmmod jfs.ko");
               
                Unres(mkdir(MountPoint1, S_IRUSR | S_IWUSR) == -1 && errno != EEXIST, "Cannot create mount directory for second filesystem");
               
                Unres(!PartitionManager:: CreateFilesystem(FileSystem, DeviceName, false, string("-j ") + ExtJournalName), "Failed to create filesystem")
                Unres(!PartitionManager:: CreateFilesystem(FileSystem, Device1, false, string("-j ") + ExtJournalName), "Failed to create second filesystem");
                               
                Unres(mount(DeviceName, MountPoint, FileSystem, 0, "") == -1, "Failed to mount");
                Unres(mount(Device1.c_str(), MountPoint1, FileSystem, 0, "") == -1, "Failed to mount second filesystem");
            </Code>
            <Footer>
                Fatal(umount(MountPoint) == -1 && errno != EINVAL, "Failed to release partition");
                
                Fatal(umount(MountPoint1) == -1 && errno != EINVAL, "Failed to release second partition");
                Fatal(rmdir(MountPoint1) == -1 && errno != EINVAL, "Failed to remove mount directory for second partition");
            </Footer>
        </Test>
        <Test Name="NoIntegrityOption1" use-mount="true">
            <Description>Mount with no integrity option and remount without it.</Description>
            <Code>
                mount(DeviceName, MountPoint, FileSystem, MS_REMOUNT, "nointegrity");
                EnableFaultSim();
                mount(DeviceName, MountPoint, FileSystem, MS_REMOUNT, 0);
                DisableFaultSim();
                if( PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem)!= PS_Success )
                {
                    Error("Mount failed!");
                    Return(Fatal);
                }
            </Code>
        </Test>
        
        <Test Name="ErrPanicOption" use-mount="true">
            <Description>Mount with errors=panic option</Description>
            <Code>
                Check(mount(DeviceName, MountPoint, FileSystem, MS_REMOUNT, "errors=panic") == -1,
                    "Remount with error=panic option failed.");
                umount(DeviceName);
            </Code>
        </Test>
        
        <Test Name="DoubleIOCharset" use-mount="true">
            <Description>Mount with double charsets.</Description>
            <Code>
                Check(mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "iocharset=ascii,iocharset=cp1251") == -1,
                    "Remount with iocharset option redefinition failed.");
            </Code>
        </Test>
        
        <Test Name="DoubleIOCharsetUnknown" use-mount="true">
            <Description>Mount with wrong charset.</Description>
            <Code>
                Check(mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "iocharset=ascii,unknown") != -1,
                    "Remount didn't fail with two values of 'iocharset' option, one of which is wrong");
            </Code>
        </Test>
        
        <Test Name="Mount444" use-mount="true">
            <Description>Mount with umask=444.</Description>
            <Code>
                string dirname = "dir";
                
                system(("rm -rf " + (string)MountPoint + "/*").c_str());
                
                Unres( mkdir(dirname.c_str(), 444) == -1, "Cannot create directory.");
                
                chdir("/");
                
                Unres( PartitionManager::ReleasePartition(MountPoint) == false, "Cannot release partition." );
                
                Unres( mount( DeviceName, MountPoint, FileSystem, 0, "umask=000") == -1, "Cannot mount device with umask = 000");
            </Code>
        </Test>
        
        <Test Name="RemountRW" use-mount="true">
            <Dangerous/>
            <Description>Remount from ro to rw.</Description>              
            <Code>
                Unres( mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT | MS_RDONLY, 0) == -1, "Remount ro failed.");

                Fail( mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, 0) == -1, "Remount rw failed.");
            </Code>
        </Test>
        <Test Name="MountfailWithNls" use-mkfs="true">
        <Dangerous/>
        <Description>Trying to mount the device with iocahrset and perform fault simulation.</Description>
        <Code>
            Fail (mount( DeviceName, MountPoint, FileSystem, 0, "iocharset=cp1251") == -1, "Mount failed");            
        </Code>
    </Test>
</TestSet>
