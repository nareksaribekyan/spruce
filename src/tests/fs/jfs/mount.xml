<!--    OverloadTests.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Nellie Danielyan <Nellie.92.d@gmail.com>
//      	Vahram Martirosyan <vmartirosyan@gmail.com>
//
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<!--Test set covers most of JFS resize.c and some of dmap.c code
(the functions called from resize.c which weren't called before.)
It seems the part of resize.c refering to invalid block number checks 
isn't covered as mount options are parsed and checked in super.c-->
<TestSet Name="mount">
	<StartUp>
		Unres ( !PartitionManager::NoOptionsEnabled()
				&amp;&amp; !PartitionManager::IsOptionEnabled("-j", true),
			"These tests should run only when no options are provided." );
	</StartUp>
        <Requires>sys/mount.h</Requires>
        <Requires>sstream</Requires>
        <Test Name="RemountResize" FaultSimulationReady="true">
                <Description>Resize.</Description>              
                <Code>
						Unres(! strcmp(DeviceName, ""), "No partition name is provided.");
                        Unres(! strcmp(FileSystem, ""), "No file system type is provided.");
                        Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
                        int res;
                        Unres ( chdir("/") == -1, "Cannot change directory." );
						res = PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem, true, true);
						if( res!= PS_Success )
						{
							if( res == PS_Fatal )
							{
								Error("Device too small.");
								Return(Unresolved);
							}						
							Error("Partition mount or umount failed");
							Return(Unresolved);	
						}
						
                        res = mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "resize") ;
                        
                        
						if( PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem)!= PS_Success )
						{
							Error("Mount failed!");
							Return(Fatal);
						}
						if( res == -1 )
						{
							if( PartitionManager::IsOptionEnabled("ro") )
							{
								Return(Success);
							}
							else
							{
								Return(Fail);
							}
						}
                </Code>
        </Test>
		 <Test Name="RemountResizeWrong" FaultSimulationReady="true">
				<Description>.</Description>
				<Code>
						Unres(! strcmp(DeviceName, ""), "No partition name is provided.");
						Unres(! strcmp(FileSystem, ""), "No file system type is provided.");
						Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
						int res;
						uint64_t size = PartitionManager::GetDeviceSize(DeviceName)+100;
						stringstream ss;
						ss << size;
						mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, ("resize=" + ss.str()).c_str());
						mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "resize=1");
						if( PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem)!= PS_Success )
						{
							Error("Mount failed!");
							Return(Fatal);
						}
				</Code>
		</Test>		
		<Test Name="WrongErrorOption" FaultSimulationReady="true">
				<Description>.</Description>
				<Code>
						Unres(! strcmp(DeviceName, ""), "No partition name is provided.");
						Unres(! strcmp(FileSystem, ""), "No file system type is provided.");
						Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
						
						//this mount should fail as there is no error option "unknown", so there is no need to Restore the partition after.
						mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "errors=unknown");						
				</Code>
		</Test>
		
		<Test Name="WrongIOCharset" FaultSimulationReady="true">
			<Description>Mount with wrong charset.</Description>
			<Code>
				Unres(! strcmp(DeviceName, ""), "No partition name is provided.");
				Unres(! strcmp(FileSystem, ""), "No file system type is provided.");
				Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
				
				//this mount should fail as there is no charset value "unknown", so there is no need to Restore the partition after.
				mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "iocharset=unknown");						
			</Code>
		</Test>
		
		<Test Name="WrongUmask" FaultSimulationReady="true">
			<Description>Mount with wrong umask.</Description>
			<Code>
				Unres(! strcmp(DeviceName, ""), "No partition name is provided.");
				Unres(! strcmp(FileSystem, ""), "No file system type is provided.");
				Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
				
				//this mount should fail as there is no umask value "07777", so there is no need to Restore the partition after.
				mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "umask=07777");						
			</Code>
		</Test>
		
		<Test Name="NoIntegrityOption" FaultSimulationReady="true">
			<Description>Mount with no integrity option</Description>
			<Code>
				Unres(! strcmp(DeviceName, ""), "No partition name is provided.");
				Unres(! strcmp(FileSystem, ""), "No file system type is provided.");
				Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
				
				mount(DeviceName, MountPoint, FileSystem, MS_REMOUNT, "nointegrity");
			</Code>
		</Test>
</TestSet>
