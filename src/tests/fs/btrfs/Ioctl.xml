<!--    Ioctl.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//				Karen Tsirunyan <ktsirunyan@gmail.com>		
//				Ani Tumanyan <ani.tumanyan92@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->
<TestSet Name="Ioctl">
	
	<!--Requires>sys/ioctl.h</Requires-->
	<Requires>sys/types.h</Requires>
	<Requires>sys/statvfs.h</Requires>
	<Requires>linux/fs.h</Requires>
	<Requires>fcntl.h</Requires>
	<Requires>btrfs.hpp</Requires>
	<Requires>defines.h</Requires>
	<Test Name="SetGetFlags_Empty" FaultSimulationReady="true">
		<Requires KernelVersion="2.6.32" Defined="FITRIM" />
		<Description>Try to set and get flag values. </Description>
		<File count="1"/>
		<Code>
			int  set_flags = FS_IMMUTABLE_FL;
			int  get_flags, flags;
			
			// get flag initial values
			Fail( ioctl(FDs[0], FS_IOC_GETFLAGS, &flags ) == -1 , "Error getting flag initial value. ");
			
			//Set test value to flags
			Fail( ioctl(FDs[0], FS_IOC_SETFLAGS, &set_flags ) == -1, "Error setting test value to flag. ");
			
			Check( unlink(FilePaths[0].c_str()) == 0 ,  "File must be immutable but it isn't. ");
			
			//Get new flag value
			Fail ( ioctl(FDs[0], FS_IOC_GETFLAGS, &get_flags ) == -1 , "Error getting new flag value. ");
			
			//Restore the initial flag value
			Fail( ioctl(FDs[0], FS_IOC_SETFLAGS, &flags ) == -1, "Error setting initial value to flag. ");
			
			Check ( get_flags != set_flags, "Get and Set flag values do not match!" );
		</Code>
	</Test>
	<Test Name="SetGetFlags_All" FaultSimulationReady="true" Shallow="true">
		<Description>Try to set and get flag values. </Description>
		<File count="1"/>
		<Code>
			int  get_flags, flags;
			
			int  set_flags = FS_SYNC_FL | FS_APPEND_FL | FS_IMMUTABLE_FL 
						| FS_NODUMP_FL | FS_NOATIME_FL | FS_DIRSYNC_FL;
#if LINUX_VERSION_CODE > KERNEL_VERSION(2,6,38)

			set_flags |= FS_NOCOW_FL | FS_COMPR_FL;
#endif
			
			// get flag initial values
			Fail( ioctl(FDs[0], FS_IOC_GETFLAGS, &flags ) == -1 , "Error getting flag initial value. ");
			
			//Set test value to flags
			Fail( ioctl(FDs[0], FS_IOC_SETFLAGS, &set_flags ) == -1, "Error setting test value to flag. ");
			
			Check( unlink(FilePaths[0].c_str()) == 0 ,  "File must be immutable but it isn't. ");
			
			//Get new flag value
			Fail ( ioctl(FDs[0], FS_IOC_GETFLAGS, &get_flags ) == -1 , "Error getting new flag value. ");
			
			//Restore the initial flag value
			Fail( ioctl(FDs[0], FS_IOC_SETFLAGS, &flags ) == -1, "Error setting initial value to flag. ");
						
		</Code>
	</Test>
	<Test Name ="SetFlagsNotOwner" >
		<Description> Try to change flag by not the file owner.</Description>
		<File count="1"/>
		<Code>
			int flags = FS_APPEND_FL;
			ENoAccessTest(ioctl(FDs[0], FS_IOC_SETFLAGS, &flags ), -1);
		</Code>	
	</Test>
	
	<Test Name ="InappropriateIoctl" >
		<Description> Try to set inappropriate request for ioctl.</Description>
		<File count="1"/>
		<Code>
			int version = rand();
			ErrorTest( ioctl(FDs[0], FS_IOC_SETVERSION, &version ) ,-1, ENOTTY );
		</Code> 
	</Test>
	<Test Name="UnsupportedFlag">
		<Description> Try to set unsupported flag value. </Description>
		<File count="1"/>
		<Code>
			int flags = FS_SECRM_FL;
			Fail ( ( ioctl(FDs[0], FS_IOC_SETFLAGS, &flags ) == 0 ) || 
				( errno != ENOTTY ) && ( errno != EOPNOTSUPP ) , 
				"Function should return 'Operation not supported' error but it did not.");
			
		</Code>
	</Test>
	
	<!-- shallow tests -->
	<Test Name="Fitrim" Shallow="true">
		<Requires Defined="FITRIM" />
		<Description>FITRIM shallow test</Description>
		<File count="1"/>
		<Code>
			Fail ( ioctl(FDs[0], FITRIM, 0) == -1 , "Error FITRIM.");
		</Code>
	</Test>	
	<Test Name="BTRFS_IOC_SNAP_CREATE" Shallow="true">
		<Description>BTRFS_IOC_SNAP_CREATE.</Description>
		<Dir count="1"/>
		<Code>
			btrfs_ioctl_vol_args arg;
			strcpy(arg.name, "snapshot");
			arg.fd = DirDs[0];
			Fail (ioctl( DirDs[0], BTRFS_IOC_SNAP_CREATE, &arg ) == -1, "Cannot create snapshot.");
			
			btrfs_ioctl_vol_args destroy_arg;
			strcpy(destroy_arg.name, "snapshot");
			destroy_arg.fd = DirDs[0];
			if ( ioctl( DirDs[0], BTRFS_IOC_SNAP_DESTROY, &destroy_arg ) == -1 )
				Error("Cannot destroy snapshot");
			
		</Code>
	</Test>
		
	<Test Name="BTRFS_IOC_SNAP_CREATE_V2" Shallow="true">
		<Description>BTRFS_IOC_SNAP_CREATE_V2.</Description>
		<Dir count="1"/>
		<Code>
			btrfs_ioctl_vol_args_v2 arg;
			strcpy(arg.name, "snapshot_v2");
			arg.fd = DirDs[0];
			Fail (ioctl( DirDs[0], BTRFS_IOC_SNAP_CREATE_V2, &arg ) == -1, "Cannot create snapshot");
			
			btrfs_ioctl_vol_args destroy_arg;
			strcpy(destroy_arg.name, "snapshot_v2");
			destroy_arg.fd = DirDs[0];
			if ( ioctl( DirDs[0], BTRFS_IOC_SNAP_DESTROY, &destroy_arg ) == -1 )
				Error("Cannot destroy snapshot");
			
		</Code>
	</Test>
		
	<Test Name="BTRFS_IOC_SUBVOL_CREATE" Shallow="true">
		<Description>BTRFS_IOC_SUBVOL_CREATE.</Description>
		<Dir count="1"/>
		<Code>
			btrfs_ioctl_vol_args arg;
			strcpy(arg.name, "subvol");
			arg.fd = DirDs[0];
			Fail ( ioctl( DirDs[0], BTRFS_IOC_SUBVOL_CREATE, &arg ) == -1, "Cannot create subvolume." );
			
			btrfs_ioctl_vol_args destroy_arg;
			strcpy(destroy_arg.name, "subvol");
			destroy_arg.fd = DirDs[0];
			if ( ioctl( DirDs[0], BTRFS_IOC_SNAP_DESTROY, &destroy_arg ) == -1 )
				Error("Cannot destroy snapshot");
			
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_SNAP_DESTROY" Shallow="true">
		<Description>BTRFS_IOC_SNAP_DESTROY.</Description>
		<Dir count="1"/>
		<Code>
			btrfs_ioctl_vol_args arg;
			strcpy(arg.name, "subvol");
			arg.fd = DirDs[0];
			Unres ( ioctl( DirDs[0], BTRFS_IOC_SUBVOL_CREATE, &arg ) == -1, "Cannot create subvolume." );
			
			btrfs_ioctl_vol_args destroy_arg;
			strcpy(destroy_arg.name, "subvol");
			destroy_arg.fd = DirDs[0];
			Fail ( ioctl( DirDs[0], BTRFS_IOC_SNAP_DESTROY, &destroy_arg ) == -1, "Cannot destroy snapshot");
		</Code>
	</Test>
	 
	<!-- The following test brings to a bug in btrfs
	
	<Test Name="BTRFS_IOC_SUBVOL_GETFLAGS" Shallow="true">
		<Requires KernelVersion="2.6.38" />
		<Description>BTRFS_IOC_SUBVOL_GETFLAGS.</Description>		
		<Header>
			const char * FilePath = "BTRFS_IOC_SUBVOL_GETFLAGS_dir0";
			
			File f(FilePath, 0777, O_RDONLY | O_CREAT);
			int fd = f.GetFileDescriptor();
			btrfs_ioctl_vol_args arg;
			strcpy(arg.name, "subvol");
			arg.fd = fd;
		
			Unres ( ioctl( fd, BTRFS_IOC_SUBVOL_CREATE, &arg ) == -1, "Cannot create subvolume." );
		</Header>
		<Code>
			__u64 flags = 0;
			Fail ( ioctl( fd, BTRFS_IOC_SUBVOL_GETFLAGS, &flags) == -1, "Cannot get subvolume flags." );
		</Code>
		<Footer>
			btrfs_ioctl_vol_args destroy_arg;
			strcpy(destroy_arg.name, "subvol");
			destroy_arg.fd = fd;
			
			if ( ioctl( fd, BTRFS_IOC_SNAP_DESTROY, &destroy_arg ) == -1 )
				Error("Cannot destroy snapshot");
		</Footer>
	</Test-->
		
	<!-- Test Name="BTRFS_IOC_SUBVOL_SETFLAGS" Shallow="true">
		<Requires KernelVersion="2.6.38" />
		<Description>BTRFS_IOC_SUBVOL_SETFLAGS.</Description>
		<Dir count="1"/>		
		<Header>
			btrfs_ioctl_vol_args subvol_arg;
			strcpy(subvol_arg.name, "subvol");
			subvol_arg.fd = DirDs[0];			
			Unres ( ioctl( DirDs[0], BTRFS_IOC_SUBVOL_CREATE, &subvol_arg ) == -1, "Cannot create subvolume." );
		</Header>
		<Code>
			btrfs_ioctl_get_set_flags_args arg;
			arg.flags = BTRFS_SUBVOL_RDONLY;
			arg.objectid = 0;
			
			Fail (ioctl( DirDs[0], BTRFS_IOC_SUBVOL_SETFLAGS, &arg) == -1, "Cannot set subvolume flags");
		</Code>
		<Footer>
			btrfs_ioctl_vol_args destroy_arg;
			strcpy(destroy_arg.name, "subvol");
			destroy_arg.fd = DirDs[0];
			Fail( ioctl( DirDs[0], BTRFS_IOC_SNAP_DESTROY, &destroy_arg ) == -1 )
				Error("Cannot destroy snapshot");
		</Footer>
	</Test-->
	
	<Test Name="BTRFS_IOC_DEFAULT_SUBVOL">
		<Description>BTRFS_IOC_DEFAULT_SUBVOL.</Description>
		<File count="1"/>
		<Code>
			
			__u64 arg = 0;
			Fail( ioctl( FDs[0], BTRFS_IOC_DEFAULT_SUBVOL, &arg) == -1, "Cannot set default subvolume");
		</Code>
	</Test>

	<Test Name="DefragFile" Shallow="true">
        <Description>Defragment file.</Description>
        <Code>
			if ( PartitionManager::IsOptionEnabled("ro") )
				Unsupp("Read-only file system.");
            uint64_t DeviceSize = 0;
            // Get the real free space.
            struct statvfs stat;
            Unres ( statvfs(".", &stat ) == -1, "Cannot obtain free space." );
            DeviceSize = stat.f_bavail * stat.f_bsize;
            //Unres ( (DeviceSize = PartitionManager::GetDeviceSize(DeviceName)) == 0, "Cannot get device size");
             
            //Unres ( system("rm -rf *") != 0, "Cannot clear partition");
            
            const string FileNames[] = {
			"Btrfs_ioctl_Defrag_1",
			"Btrfs_ioctl_Defrag_2",
			"Btrfs_ioctl_Defrag_3" };
                
            uint64_t FreeSpace = 1024*1024*1024;
            int i;
            stringstream ss; 
            int FileNum = ( DeviceSize - FreeSpace )/( FreeSpace );
            int LastFileSize = ( DeviceSize - FreeSpace )%( FreeSpace );
                
            int *files = new int [FileNum+1];
			for( i = 0; i < FileNum; ++i )
			{
				ss.clear();
				ss.str( string() );
				ss << i;
				files[i] = open( ss.str().c_str(),O_RDWR | O_CREAT, S_IRUSR | S_IWUSR );
				Unres(files[i] == -1 , "Cannot open pad file");
			}
            if ( FreeSpace >= DeviceSize )
            {
                // No need in pad file in this case.
                FreeSpace = DeviceSize;
            }
            else
            {    
				for( i = 0; i < FileNum; ++i )
                {
                        Unres( fallocate( files[i], 0, 0, FreeSpace ) == -1, "Cannot allocate space for pad file" );
						fsync( files[i] );
						close( files[i] );    
				}
				if( LastFileSize )
                {
						ss.clear();
						ss.str( string() );
						i = FileNum;
						ss << i;
						cerr<<ss.str();
						files[i] = open( ss.str().c_str(),O_RDWR | O_CREAT, S_IRUSR | S_IWUSR );
						Unres(files[i] == -1 , "Cannot open last pad file");
					    Unres( fallocate(files[i], 0, 0, LastFileSize ) == -1, "Cannot allocate space for last pad file");
						fsync( files[i] );
						close( files[i] );  
						Unres (unlink(ss.str().c_str()) == -1, "Cannot remove file1.");  
				}
            }
            delete files;
            
            File file1(FileNames[0]);
            Unres( fallocate(file1.GetFileDescriptor(), 0, 0, FreeSpace / 3) == -1, "Cannot allocate space for 1st file");
             fsync(file1.GetFileDescriptor());
            close(file1.GetFileDescriptor());            
            
            File file2(FileNames[1]);
            Unres( fallocate(file2.GetFileDescriptor(), 0, 0, FreeSpace / 3) == -1, "Cannot allocate space for 2nd file");
             fsync(file2.GetFileDescriptor());
            close(file2.GetFileDescriptor());
            
            
            
            // It is not guaranteed that the fallocate function allocates continuous space.
            // Try to allocate space more than (FreeSpace / 3).
            // As the filesystem if fragmented it must not be possible.
            //File file10(FileNames[0]);
            //Unres( fallocate(file10.GetFileDescriptor(), 0, 0, FreeSpace / 3 + 1024) == 0, "It was possible to allocate space before defragmentation.");
            //unlink(FileNames[0].c_str());
                        
             char * buf = new char[FreeSpace / 3 + 1024];
            Unres(buf == NULL, "Cannot allocate memory.");
            File file3(FileNames[2]);
            write(file3.GetFileDescriptor(), buf, FreeSpace / 3 + 1024 );
             delete buf;
            fsync(file3.GetFileDescriptor());
            close(file3.GetFileDescriptor());
            
            Unres (unlink(FileNames[1].c_str()) == -1, "Cannot remove file2.");
            
            int fd = open(FileNames[2].c_str(), O_RDWR);
            sync();
            
            int status = ioctl( fd, BTRFS_IOC_DEFRAG, NULL);
             close(fd);
            unlink(FileNames[2].c_str());
            
            
            // It is not guaranteed that the fallocate function allocates continuous space.
            // Try to allocate space more than (FreeSpace / 3).
            // It must be possible as the filesystem is defragmented.
            // File file11(FileNames[1]);
            // Unres( fallocate(file11.GetFileDescriptor(), 0, 0, FreeSpace / 3 + 1024) == -1, "It was not possible to allocate space after defragmentation.");
            // Fail ( status == -1, "Cannot defragment file." );                
            
        </Code>
    </Test>
	<Test Name="DefragDirectory" Shallow="true">
		<Description>Defragment the entire b-tree under the directory.</Description>
		<Dir count="1"/>
		<Code>
			btrfs_ioctl_defrag_range_args arg;			
			arg.flags = BTRFS_DEFRAG_RANGE_COMPRESS;
			Fail( ioctl( DirDs[0], BTRFS_IOC_DEFRAG, &arg) == -1, "Cannot defragment directory");
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_DEFRAG_RANGE" Shallow="true">
		<Description>BTRFS_IOC_DEFRAG_RANGE.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_defrag_range_args arg;
			memset(&arg, 0, sizeof(arg));
			arg.start = 0;
			arg.len = (__u64)-1;
			arg.extent_thresh = 0;
			Fail( ioctl( FDs[0], BTRFS_IOC_DEFRAG_RANGE, &arg) == -1,"Cannot defragment range of files");			
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_RESIZE" Shallow="true">
		<Description>BTRFS_IOC_RESIZE.</Description>
		<Code>
			chdir("/");
			Unres(! strcmp(DeviceName, ""), "No partition name is provided.");
			Unres(! strcmp(FileSystem, ""), "No file system type is provided.");
			Unres(! strcmp(MountPoint, ""), "No mount point is provided.");
			
			// Remount the partition changing it's size
			int res = PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem, true, true);
			if( res != PS_Success )
			{
				Unres( res == PS_Fatal, "Device too small.");
				Unres(true, "Partition mount or umount failed");				
			}			
						
			int fd = open(MountPoint, O_DIRECTORY);
			Unres ( fd == -1, "Cannot open MountPoint descriptor." );
			
			btrfs_ioctl_vol_args arg, arg1;
			int res2;
			strcpy(arg.name, "max");
			strcpy(arg1.name, "-20k");
			res = ioctl( fd, BTRFS_IOC_RESIZE, &arg);
			res2 = ioctl( fd, BTRFS_IOC_RESIZE, &arg1);
			int my_errno = errno;
			
			close(fd);
			
			if( PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem)!= PS_Success )
			{
				Error("Mount failed!");
				_TestStatus = Fatal;
			}
			if( res == -1 || res2 == -1)
			{
				if( PartitionManager::IsOptionEnabled("ro") )
				{
					Return(Shallow);
				}
				else
				{
					errno = my_errno;
					Fail(true, "Cannot resize partition.");
				}
			}
			
			
		</Code>
	</Test>

	<!--Test Name="BTRFS_IOC_ADD_DEV" Shallow="true">
		<Description>BTRFS_IOC_ADD_DEV.</Description>
		<Dir count="1"/>
		<Code>	
			btrfs_ioctl_vol_args arg;			
			strcpy(arg.name, "device");
			arg.fd = DirDs[0];
			Fail( ioctl( DirDs[0], BTRFS_IOC_ADD_DEV, &arg) == -1, "Cannot add a device");
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_RM_DEV" Shallow="true">
		<Description>BTRFS_IOC_RM_DEV.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_vol_args arg;
			Fail( ioctl( FDs[0], BTRFS_IOC_RM_DEV, &arg) == -1, "Cannot remove a device");
		</Code>
	</Test-->

	<Test Name="BTRFS_IOC_FS_INFO" Shallow="true">
		<Description>BTRFS_IOC_FS_INFO.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_fs_info_args arg;
			Fail( ioctl( FDs[0], BTRFS_IOC_FS_INFO, &arg) == -1, "Cannot get file information");
		</Code>
	</Test>

	<!--Test Name="BTRFS_IOC_DEV_INFO" Shallow="true">
		<Description>BTRFS_IOC_DEV_INFO.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_dev_info_args arg;
			Fail( ioctl( FDs[0], BTRFS_IOC_DEV_INFO, &arg) == -1, "Cannot get device information");
		</Code>
	</Test-->

	<Test Name="BTRFS_IOC_BALANCE" Shallow="true">
		<Description>BTRFS_IOC_BALANCE.</Description>
		<File count="1" />
		<Code>
			Fail( ioctl( FDs[0], BTRFS_IOC_BALANCE, NULL) == -1, "Cannot balance filesystem chunks");			
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_CLONE" Shallow="true">
		<Description>BTRFS_IOC_CLONE.</Description>
		<File count="2"/>
		<Code>
			Fail( ioctl( FDs[0], BTRFS_IOC_CLONE, FDs[1]) == -1, "Cannot clone the file");
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_CLONE_RANGE" Shallow="true">
		<Description>BTRFS_IOC_CLONE_RANGE.</Description>
		<File count="2"/>
		<Code>
			struct btrfs_ioctl_clone_range_args args;
			args.src_fd = FDs[1];
			args.src_offset = 0;
			args.src_length = 0;
			args.dest_offset = 0;
			Fail(ioctl( FDs[0], BTRFS_IOC_CLONE_RANGE, &args) == -1, "Cannot clone range of files");
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_TRANS_START_END" Shallow="true">
		<Description>BTRFS_IOC_TRANS_START.</Description>
		<File count="1"/>
		<Code>
			Fail( ioctl( FDs[0], BTRFS_IOC_TRANS_START, NULL) == -1, "Cannot start a transaction");
			
			Fail( ioctl( FDs[0], BTRFS_IOC_TRANS_END, NULL) == -1, "Cannot end a transaction");
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_TREE_SEARCH" Shallow="true">
		<Description>BTRFS_IOC_TREE_SEARCH.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_search_args arg;
			memset(&arg, 0, sizeof(arg));
			Fail( ioctl( FDs[0], BTRFS_IOC_TREE_SEARCH, &arg ) == -1, "Cannot find the key");
		</Code>
	</Test>

	<!--Test Name="BTRFS_IOC_INO_LOOKUP" Shallow="true">
		<Description>BTRFS_IOC_INO_LOOKUP.</Description>
		<Dir count="1"/>
		<Code>
			btrfs_ioctl_vol_args subvol_arg;
			strcpy(subvol_arg.name, "INO_LOOKUP");
			subvol_arg.fd = DirDs[0];
			Fail ( ioctl( DirDs[0], BTRFS_IOC_SUBVOL_CREATE, &subvol_arg ) == -1, "Cannot create subvolume." );
						
			btrfs_ioctl_ino_lookup_args arg;
			memset(&arg, 0, sizeof(arg));
			strcpy(arg.name, DirPaths[0].c_str());
			arg.objectid = DirDs[0];
			int st = ioctl( DirDs[0], BTRFS_IOC_INO_LOOKUP, &arg);
			
			btrfs_ioctl_vol_args destroy_arg;
			strcpy(destroy_arg.name, "INO_LOOKUP");
			destroy_arg.fd = DirDs[0];
			if ( ioctl( DirDs[0], BTRFS_IOC_SNAP_DESTROY, &destroy_arg ) == -1 )
				Error("Cannot destroy snapshot");
				
			Fail ( st == -1, "Inode lookup failed.");
		</Code>
	</Test>
	
	<Test Name="BTRFS_IOC_INO_PATHS" Shallow="true">
		<Description>BTRFS_IOC_INO_PATHS.</Description>
		<Dir count="1"/>
		<Code>
			btrfs_ioctl_ino_path_args arg;
			arg.inum = 1;
			arg.size = 4096;
			arg.fspath = (__u64)malloc(4096);
			Fail( ioctl( DirDs[0], BTRFS_IOC_INO_PATHS, &arg) == -1, "Cannot get inode paths.");
		</Code>
	</Test>
	
	<Test Name="BTRFS_IOC_LOGICAL_INO" Shallow="true">
		<Description>BTRFS_IOC_LOGICAL_INO.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_logical_ino_args arg;
			arg.logical = 0;
			arg.size = 64*1024;
			arg.inodes = 1;
			Fail( ioctl( FDs[0], BTRFS_IOC_LOGICAL_INO, &arg) == -1, "Cannot get inodes of the logical address");
		</Code>
	</Test-->
	
	<Test Name="BTRFS_IOC_SPACE_INFO" Shallow="true">
		<Description>BTRFS_IOC_SPACE_INFO.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_space_args * arg = reinterpret_cast<btrfs_ioctl_space_args*>(
											malloc( sizeof(btrfs_ioctl_space_args) + sizeof(btrfs_ioctl_space_info)  ));			
			//memset(&arg, 1, sizeof(btrfs_ioctl_space_args));
			arg->space_slots = 1;
			
			Fail( ioctl( FDs[0], BTRFS_IOC_SPACE_INFO, arg) == -1, "BTRFS_IOC_SPACE_INFO ioctl failed.");
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_SYNC" Shallow="true">
		<Description>BTRFS_IOC_SYNC.</Description>
		<File count="1"/>
		<Code>
			Fail( ioctl( FDs[0], BTRFS_IOC_SYNC, NULL) == -1, "Cannot force sync on the filesystem");
		</Code>
	</Test>

	<Test Name="BTRFS_IOC_START_SYNC" Shallow="true">
		<Requires KernelVersion="2.6.37" />
		<Description>BTRFS_IOC_START_SYNC.</Description>
		<File count="1"/>
		<Code>
			Fail( ioctl( FDs[0], BTRFS_IOC_START_SYNC, NULL) == -1, "Cannot strat sync.");
		</Code>		
	</Test>	
	<Test Name="BTRFS_IOC_WAIT_SYNC" Shallow="true">
		<Requires KernelVersion="2.6.37" />
		<Description>BTRFS_IOC_WAIT_SYNC.</Description>
		<File count="1"/>
		<Code>
#ifndef BTRFS_IOC_WAIT_SYNC			
#define BTRFS_IOC_WAIT_SYNC  _IOW(BTRFS_IOCTL_MAGIC, 22, __u64)
#endif
			Fail( ioctl( FDs[0], BTRFS_IOC_WAIT_SYNC, NULL) == -1, "Cannot syncronize wait");
		</Code>
	</Test>
	
	<!-- No support for scrub still -->
	<!--Test Name="BTRFS_IOC_SCRUB" Shallow="true">
		<Description>BTRFS_IOC_SCRUB.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_space_args arg;
			Fail( ioctl( FDs[0], BTRFS_IOC_SCRUB, &arg) == -1, "Cannot scrub the file.");
		</Code>
	</Test>
	
	<Test Name="BTRFS_IOC_SCRUB_CANCEL" Shallow="true">
		<Description>BTRFS_IOC_SCRUB_CANCEL.</Description>		
		<File count="1" />
		<Code>
			Fail( ioctl( FDs[0], BTRFS_IOC_SCRUB_CANCEL, NULL) == -1, "cannot cancel scrub.");
		</Code>
	</Test>
	
	<Test Name="BTRFS_IOC_SCRUB_PROGRESS" Shallow="true">
		<Description>BTRFS_IOC_SCRUB_PROGRESS.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_scrub_args arg;
			Fail( ioctl( FDs[0], BTRFS_IOC_SCRUB_PROGRESS, &arg) == -1, "Cannot get scrub progress.");
		</Code>
	</Test-->
	
	<Test Name="BTRFS_IOC_BALANCE_V2" Shallow="true">
		<Requires KernelVersion="3.3.0" />
		<Description>BTRFS_IOC_BALANCE_V2.</Description>
		<File count="1" />
		<Code>
			btrfs_ioctl_balance_args arg;
			arg = (const struct btrfs_ioctl_balance_args){0};    
            arg.state |= BTRFS_BALANCE_STATE_RUNNING;
			Fail( ioctl( FDs[0], BTRFS_IOC_BALANCE_V2, &arg) == -1, "V2 balance failed.");
		</Code>
		<Footer>

		</Footer>
	</Test>
	
	<!--Test Name="BTRFS_IOC_BALANCE_CTL" Shallow="true">
		<Requires KernelVersion="3.3.0" />
		<Description>BTRFS_IOC_BALANCE_CTL.</Description>
		<File count="1" />
		<Code>
			Unres( ioctl( FDs[0], BTRFS_IOC_BALANCE, NULL) == -1, "Cannot balance filesystem chunks");
			
			int cmd = BTRFS_BALANCE_CTL_PAUSE;
			Fail( ioctl( FDs[0], BTRFS_IOC_BALANCE_CTL, cmd), "Balance control failed.");
		</Code>
	</Test>
	
	<Test Name="BTRFS_IOC_BALANCE_PROGRESS" Shallow="true">
		<Requires KernelVersion="3.3.0" />		
		<Description>BTRFS_IOC_BALANCE_PROGRESS.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_balance_args arg;
			Fail( ioctl( FDs[0], BTRFS_IOC_BALANCE_PROGRESS, &arg) == -1, "Cannot get balance progress.");
		</Code>
	</Test-->
	
	<!--Test Name="BTRFS_IOC_SET_RECEIVED_SUBVOL" Shallow="true">
		<Requires KernelVersion="3.3.0" />		
		<Description>BTRFS_IOC_SET_RECEIVED_SUBVOL.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_received_subvol_args arg;
			Fail(ioctl( FDs[0], BTRFS_IOC_SET_RECEIVED_SUBVOL, &arg) == -1, "Cannot set received subvolume.");
		</Code>		
	</Test-->
		
	<!--Test Name="BTRFS_IOC_SEND" Shallow="true">
		<Requires KernelVersion="3.6.0" />
		<Description>BTRFS_IOC_SEND.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_send_args arg;
			Fail( ioctl( FDs[0], BTRFS_IOC_SEND, &arg) == -1, "Send failed.");
		</Code>
	</Test-->

	<!--Test Name="BTRFS_IOC_GET_DEV_STATS" Shallow="true">
		<Requires KernelVersion="3.5.0" />
		<Description>BTRFS_IOC_GET_DEV_STATS.</Description>
		<File count="1"/>
		<Code>
			btrfs_ioctl_get_dev_stats arg;
			Fail( ioctl( FDs[0], BTRFS_IOC_GET_DEV_STATS, &arg) == -1, "Cannot get device stats.");
		</Code>
	</Test-->
	
 <!-- Only supported for 3.5 kernel--> 
	<!--Test Name="BTRFS_IOC_GET_AND_RESET_DEV_STATS" Shallow="true">
		<Requires Defined="BTRFS_IOC_GET_AND_RESET_DEV_STATS" />
		<Description>BTRFS_IOC_GET_AND_RESET_DEV_STATS.</Description>
		<File count="1"/>
		<Code>
			ioctl( FDs[0], BTRFS_IOC_GET_AND_RESET_DEV_STATS, buf);
		</Code>		
	</Test-->
</TestSet>
