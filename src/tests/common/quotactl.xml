<!--    quotactl.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="quotactl" mount-oriented="false" use-mount="true">
	<RequiresAll Condition="QUOTA_ENABLED == 1"/>
	<Requires>sys/quota.h</Requires>
	<Requires>sys/mount.h</Requires><!-- Should come before linux/fs.h-->
	<Requires>linux/fs.h</Requires><!--For some mount flags-->
	<GlobalHeader>
// <sys/quota.h> miss declaration of quota format identifiers.
// While them are defined in <linux/quota.h>, we cannot include this file
// because it contains quotactl() definition incompatible with one in
// <sys/quota.h>.
// So define all used formats by hand.
#ifndef QFMT_VFS_V0
#define QFMT_VFS_V0 2
#endif

// Define some "constants" which depends from mount options for use in tests.
#define cmd_on (PartitionManager::IsUserQuotaEnabled() ? QCMD(Q_QUOTAON, USRQUOTA) : QCMD(Q_QUOTAON, GRPQUOTA))
#define cmd_off (PartitionManager::IsUserQuotaEnabled() ? QCMD(Q_QUOTAOFF, USRQUOTA) : QCMD(Q_QUOTAOFF, GRPQUOTA))
#define QuotaFile (string(MountPoint) + (PartitionManager::IsUserQuotaEnabled() ? "/aquota.user" : "/aquota.group"))
	</GlobalHeader>
	
	<Header>
	if ( ! strcmp(FileSystem, "xfs") )
		Unsupp("XFS use its own quotactl requests.");	
	if ( !PartitionManager::IsUserQuotaEnabled() && !PartitionManager::IsGroupQuotaEnabled())
		Unsupp("quota mount option is not provided.");
	</Header>
	<Internal>
		bool Prepare(void)
		{
			UnixCommand* quotacheck;
			ProcessResult * res;
			vector<string> args;
			
			// Create the quota files
			quotacheck = new UnixCommand(QUOTACHECK_PATH);
			
			args.push_back("-c");
			args.push_back("-u");
			args.push_back("-g");
			//args.push_back("-F");
			args.push_back(MountPoint);
			
			res = quotacheck->Execute(args);
			delete quotacheck;
			if( res == NULL || res->GetStatus() != Success)
			{
				Error("Cannot execute 'quotacheck' command to create the quota file.\n" + res->GetOutput() );
				return false;
			}
			
			return true;
		}
	</Internal>
	<Test Name="QuotactlQuotaOnOff" FaultSimulationReady="true">
		<Description>Turn on and off quotas for a file system.</Description>		
		<Code>
			Unres ( !Prepare(), "");
			
			Fail( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			Fail( quotactl(cmd_off, DeviceName, 0, NULL) == -1, "Cannot disable quotas V0." );
		</Code>
	</Test>
	<Test Name="QuotactlNoQuota" FaultSimulationReady="true">
		<Description>Turn on and off quotas for a file system when noquota is enabled..</Description>		
		<Code>
			Unres ( !Prepare(), "");
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			int res = mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, "noquota");
			Unres( quotactl(cmd_off, DeviceName, 0, NULL) == -1, "Cannot disable quotas V0." );
			if ( !strcmp(FileSystem, "ext4"))
			{
				Check(res == 0, "Mount should fail, but it did not."); 	
			}
		</Code>
	</Test>
	<Test Name="QuotactlGetSetQuota" FaultSimulationReady="true">
		<Description>Set and get quota information for user or group id.</Description>		
		<Code>
			int cmd_get_quota;
			int cmd_set_quota;
			Unres ( !Prepare(), "");
			
			if(PartitionManager::IsUserQuotaEnabled() )
			{
				cmd_get_quota = QCMD(Q_GETQUOTA, USRQUOTA);
				cmd_set_quota = QCMD(Q_SETQUOTA, USRQUOTA);
			}
			else
			{
				cmd_get_quota = QCMD(Q_GETQUOTA, GRPQUOTA);
				cmd_set_quota = QCMD(Q_SETQUOTA, GRPQUOTA);
			}
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			struct dqblk quota_data, quota_data2;
			memset(&quota_data, 0, sizeof(quota_data));
			memset(&quota_data2, 0, sizeof(quota_data2));
			
			quota_data.dqb_bhardlimit = 1000;
			quota_data.dqb_valid = QIF_BLIMITS;
			
			Fail( quotactl(cmd_set_quota, DeviceName, 0, reinterpret_cast<caddr_t>(&quota_data) ) == -1, "Cannot set quota." );
			
			Fail( quotactl(cmd_get_quota, DeviceName, 0, reinterpret_cast<caddr_t>(&quota_data2) ) == -1, "Cannot get quota." );
			
			Fail( quota_data.dqb_bhardlimit != quota_data2.dqb_bhardlimit, "Different values after set-get operation." );
			
			Unres ( quotactl(cmd_off, DeviceName, 0, NULL) == -1, "Cannot disable quotas V0.");
		</Code>
	</Test>
	<Test Name="QuotactlGetSetQuotaInfo" FaultSimulationReady="true">
		<Description>Set and get information about quotafile.</Description>		
		<Code>	
			int cmd_get_info;
			int cmd_set_info;
			
			Unres ( !Prepare(), "");
			
			if(PartitionManager::IsUserQuotaEnabled() )
			{
				cmd_get_info = QCMD(Q_GETINFO, USRQUOTA);
				cmd_set_info = QCMD(Q_SETINFO, USRQUOTA);
			}
			else
			{
				cmd_get_info = QCMD(Q_GETINFO, GRPQUOTA);
				cmd_set_info = QCMD(Q_SETINFO, GRPQUOTA);
			}
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			struct dqinfo quota_info, quota_info2;
			memset(&quota_info, 0, sizeof(quota_info));
			memset(&quota_info2, 0, sizeof(quota_info2));
			
			quota_info.dqi_bgrace = 100;
			quota_info.dqi_valid = IIF_BGRACE;
			Fail( quotactl(cmd_set_info, DeviceName, 0, reinterpret_cast<caddr_t>(&quota_info) ) == -1, "Cannot set info." );
			
			Fail( quotactl(cmd_get_info, DeviceName, 0, reinterpret_cast<caddr_t>(&quota_info2) ) == -1, "Cannot get info." );
			
			Fail( quota_info.dqi_bgrace != quota_info2.dqi_bgrace, "Different values after set-get operation." );
			
			Unres( quotactl(cmd_off, DeviceName, 0, NULL) == -1, "Cannot disable quotas V0.");
		</Code>
	</Test>
	<Test Name="QuotactlGetFormat" FaultSimulationReady="true">
		<Description>Get quota format used on the specified file system.</Description>		
		<Code>
			int cmd_get_format;
			int format;
			
			Unres ( !Prepare(), "");
			
			if(PartitionManager::IsUserQuotaEnabled())
			{
				cmd_get_format = QCMD(Q_GETFMT, USRQUOTA);
			}
			else
			{
				cmd_get_format = QCMD(Q_GETFMT, GRPQUOTA);
			}
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			Fail( quotactl(cmd_get_format, DeviceName, 0, reinterpret_cast<caddr_t>(&format) ) == -1, "Cannot get format." );
			
			Check( format != QFMT_VFS_V0, "Format value is not correct" );
			
			Unres ( quotactl(cmd_off, DeviceName, 0, NULL) == -1, "Cannot disable quotas V0.");
		</Code>
	</Test>
	<Test Name="QuotactlSync" FaultSimulationReady="true" Shallow="true">
		<Description>Update the on-disk copy of quota usages for a file system.</Description>		
		<Code>
			Unres ( !Prepare(), "");
			
			int cmd_sync = QCMD(Q_SYNC, USRQUOTA);
			
			Unres( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, static_cast<caddr_t>(const_cast<char*>(QuotaFile.c_str()))) == -1, "Cannot enable quotas V0." );
			
			Fail( quotactl(cmd_sync, DeviceName, 0, 0 ) == -1, "Cannot sync." );
			
			Unres( quotactl(cmd_off, DeviceName, 0, NULL) == -1, "Cannot disable quotas V0.");
		</Code>
	</Test>
</TestSet>
