<!--    read_write.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
// 			Tigran Piloyan <tigran.piloyan@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="read_write">	
	<Requires>unistd.h</Requires>
	<Test Name="ReadWriteNormal" FaultSimulationReady="true">
		<Description>Read from or write to a file descriptor.</Description>
		<File count="1"/>
		<Code>
			const char * WriteBuf = "012345";
			char ReadBuf[10];
			
			Fail ( write(FDs[0], WriteBuf, strlen(WriteBuf)) != static_cast<int>(strlen(WriteBuf)),
				"Cannot write to file.");
			
			Unres(lseek(FDs[0], SEEK_SET, 0) == -1, "Cannot seek to the beginning of file.");
			
			Fail ( read(FDs[0], ReadBuf, 1) != 1, "Cannot read from file.");
			
			Check ( ReadBuf[0] != WriteBuf[0], "Different values were written and read.");
		</Code>
	</Test>
	<Test Name="ReadWriteDirect" FaultSimulationReady="true">
		<Description>Try  to  minimize cache effects of the I/O to and from this file.</Description>
		<Header>
			if ( PartitionManager::IsOptionEnabled("data=journal") )
				Unsupp("ReadWriteDirect with  mount option  data=journal is not supported.");
		</Header>
		<File count="1" flags="O_CREAT | O_RDWR | O_DIRECT"/>
		<Code>				
			const int BlockSize = 512;
			char* WriteBuf = new char[3*BlockSize];
			// Align to block size
			char * WriteStart = reinterpret_cast<char*>(((reinterpret_cast<long>(WriteBuf) / BlockSize) + 1) * BlockSize);
			WriteStart[0] = 'A';
			
			char* ReadBuf = new char[2*BlockSize];
			char * ReadStart = reinterpret_cast<char*>(((reinterpret_cast<long>(ReadBuf) / BlockSize) + 1) * BlockSize);
			
			Fail ( write(FDs[0], WriteStart, 2*BlockSize) == -1, "Cannot write to file.");
			
			Unres(lseek(FDs[0], SEEK_SET, 0) == -1, "Cannot seek to the beginning of file.");
			
			Fail ( read(FDs[0], ReadStart, BlockSize) == -1, "Cannot read from file.");
			
			Check ( ReadStart[0] != WriteStart[0], "Different values were written and read.");
		</Code>
	</Test>
	<Test Name="ReadIsDir">
		<Description>read: fd refers to a directory.</Description>
		<Dir count="1"/>
		<Code>
			char buf[10];
			ErrorTest(read(DirDs[0], buf, 0), -1, EISDIR);
		</Code>
	</Test>
	<Test Name="ReadFault">
		<Description>read: buf is outside your accessible address space.</Description>
		<File count="1"/>
		<Code>
			const char * WriteBuf = "012345";
			Unres(write(FDs[0], WriteBuf, strlen(WriteBuf)) == -1,"Cannot write to file.");
			Unres(lseek(FDs[0], SEEK_SET, 0) == -1, "Cannot seek to the beginning of file.");
			ErrorTest(read(FDs[0], reinterpret_cast<void*>(-1), 2), -1, EFAULT);
		</Code>
	</Test>
	<Test Name="WriteFault">
		<Description>write: buf is outside your accessible address space.</Description>
		<File count="1"/>
		<Code>
			ErrorTest(write(FDs[0], reinterpret_cast<void*>(-1), 2), -1, EFAULT);
		</Code>
	</Test>
</TestSet>
