<!--    readv_writev.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
// 			Tigran Piloyan <tigran.piloyan@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="readv_writev">	
	<Requires>sys/uio.h</Requires>
	<Test Name="ReadvWritevNormal" FaultSimulationReady="true">
		<Description>Read or write data into multiple buffers.</Description>
		<File count="1"/>
		<Code>
			const int BufCount = 2;
			const string WriteBuf1 = "012345";
			const string WriteBuf2 = "abcd";
			char ReadBuf1[10];
			char ReadBuf2[10];
			
			const struct iovec WriteVec[BufCount] = { {static_cast<void*>(const_cast<char*>(WriteBuf1.c_str())), WriteBuf1.size()}, {static_cast<void*>(const_cast<char*>(WriteBuf2.c_str())), WriteBuf2.size()}};
			struct iovec ReadVec[BufCount] = { {ReadBuf1, WriteBuf1.size()}, {ReadBuf2, WriteBuf2.size()}};
			
			Fail ( writev(FDs[0], WriteVec, BufCount) != static_cast<int>((WriteVec[0].iov_len + WriteVec[1].iov_len)),
				"Cannot write to file.");
			
			Unres(lseek(FDs[0], SEEK_SET, 0) == -1, "Cannot seek to the beginning of file.");
			
			Fail ( readv(FDs[0], ReadVec, BufCount) != static_cast<int>((WriteVec[0].iov_len + WriteVec[1].iov_len)),
				"Cannot read from file.");
				
			Check ( strncmp(ReadBuf1, WriteBuf1.c_str(), WriteBuf1.size()) || strncmp(ReadBuf2, WriteBuf2.c_str(), WriteBuf2.size()) ,
				"Different values were written and read.");
		</Code>
	</Test>
	<Test Name="ReadvBadFile2">
		<Description>readv: File is not open for reading.</Description>
		<File count="1" flags="O_CREAT | O_WRONLY"/>
		<Code>
			const int BufCount = 2;
			char ReadBuf1[10];
			char ReadBuf2[10];
			
			struct iovec ReadVec[BufCount] = { {ReadBuf1, 10}, {ReadBuf2, 10}};
			ErrorTest(readv(FDs[0], ReadVec, BufCount), -1, EBADF);
		</Code>
	</Test>
	<Test Name="WritevBadFile2">
		<Description>writev: File is not open for writing.</Description>
		<File count="1" flags="O_CREAT | O_RDONLY"/>
		<Code>
			const int BufCount = 2;
			const string WriteBuf1 = "012345";
			const string WriteBuf2 = "abcd";
			
			const struct iovec WriteVec[BufCount] = { {static_cast<void*>(const_cast<char*>(WriteBuf1.c_str())), WriteBuf1.size()}, {static_cast<void*>(const_cast<char*>(WriteBuf2.c_str())), WriteBuf2.size()}};
			
			ErrorTest(writev(FDs[0], WriteVec, BufCount), -1, EBADF);
		</Code>
	</Test>
	<!--Test Name="ReadvInval">
		<Description>readv: fd  was  created  via  a call to timerfd_create(2) and the wrong size buffer was given to readv().</Description>
		<Code>
			const int BufCount = 2;
			char ReadBuf1[10];
			char ReadBuf2[10];
			
			struct iovec ReadVec[BufCount] = { {ReadBuf1, 6}, {ReadBuf2, 10}};
			int fd = timerfd_create(CLOCK_REALTIME, 0);
			Unres (fd == -1, "Cannot create timer file desciptor");
					   
			struct timespec now;
			clock_gettime(CLOCK_REALTIME, &now);
			   
			struct itimerspec new_value;
			memset(&new_value, 0, sizeof(struct itimerspec));
			new_value.it_value.tv_sec = now.tv_sec;
			new_value.it_value.tv_nsec = now.tv_nsec;
			new_value.it_interval.tv_sec = 0;
			new_value.it_interval.tv_nsec = 0;
			Unres (timerfd_settime(fd, TFD_TIMER_ABSTIME, &new_value, NULL) == -1, "Cannot set time.");			
			ErrorTest(readv(fd, ReadVec, BufCount), -1, EINVAL);
		</Code>
	</Test-->
	<Test Name="ReadvIsDir">
		<Description>readv: fd refers to a directory.</Description>
		<Dir count="1"/>
		<Code>
			const int BufCount = 2;
			char ReadBuf1[10];
			char ReadBuf2[10];
			
			struct iovec ReadVec[BufCount] = { {ReadBuf1, 10}, {ReadBuf2, 10}};
			ErrorTest(readv(DirDs[0], ReadVec, BufCount), -1, EISDIR);
		</Code>
	</Test>
	<Test Name="ReadvInval2">
		<Description>readv: The  vector  count  iovcnt is less than zero.</Description>
		<File count="1"/>
		<Code>
			const int BufCount = 2;
			char ReadBuf1[10];
			char ReadBuf2[10];
			
			struct iovec ReadVec[BufCount] = { {ReadBuf1, 10}, {ReadBuf2, 10}};
			ErrorTest(readv(FDs[0], ReadVec, -1), -1, EINVAL);
		</Code>
	</Test>
	<Test Name="WritevInval2">
		<Description>writev: The  vector  count  iovcnt is less than zero.</Description>
		<File count="1"/>
		<Code>
			const int BufCount = 2;
			char WriteBuf1[10];
			char WriteBuf2[10];
			
			const struct iovec WriteVec[BufCount] = { {WriteBuf1, 10}, {WriteBuf2, 10}};
			
			ErrorTest(writev(FDs[0], WriteVec, -1), -1, EINVAL);
		</Code>
	</Test>
	
	<!--
	Theese tests are removed, as they have ambiguous behaviour according to their documentation:
	Linux Notes
       POSIX.1-2001 allows an implementation to place a limit on the number of
       items  that  can be passed in iov.  An implementation can advertise its
       limit by defining IOV_MAX in <limits.h> or at run time via  the  return
       value  from  sysconf(_SC_IOV_MAX).   On  Linux, the limit advertised by
       these mechanisms is 1024, which is the true kernel limit.  However, the
       glibc  wrapper  functions  do  some  extra work if they detect that the
       underlying kernel system call failed because this limit  was  exceeded.
       In  the case of readv() the wrapper function allocates a temporary buf‐
       fer large enough for all of the items specified  by  iov,  passes  that
       buffer  in  a call to read(2), copies data from the buffer to the loca‐
       tions specified by the iov_base fields of the elements of iov, and then
       frees the buffer.  The wrapper function for writev() performs the anal‐
       ogous task using a temporary buffer and a call to write(2).
       
       So it is useless to check the functionality of readv andwritev, in case when buf size is greater than IOV_MAX
	-->
	<!--Test Name="ReadvInval3">
		<Description>readv: The  vector  count  iovcnt is greater than the permitted maximum.</Description>
		<File count="1"/>
		<Code>
			const int BufCount = 2;
			char ReadBuf1[10];
			char ReadBuf2[10];
			
			struct iovec ReadVec[BufCount] = { {ReadBuf1, 10}, {ReadBuf2, 10}};
			ErrorTest(readv(FDs[0], ReadVec, IOV_MAX + 1), -1, EINVAL);
		</Code>
	</Test>
	<Test Name="WritevInval3">
		<Description>writev: The  vector  count  iovcnt is greater than the permitted maximum.</Description>
		<File count="1"/>
		<Code>
			const int BufCount = 2;
			char WriteBuf1[10];
			char WriteBuf2[10];
			
			const struct iovec WriteVec[BufCount] = { {WriteBuf1, 10}, {WriteBuf2, 10}};
			ErrorTest(writev(FDs[0], WriteVec, IOV_MAX + 1), -1, EINVAL);
		</Code>
	</Test-->
	
</TestSet>
