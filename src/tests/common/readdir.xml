<!--    readdir.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//			Ani Tumanyan <ani.tumanyan92@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="readdir">
	<Requires>dirent.h</Requires>
	<Requires>sys/syscall.h</Requires>
	<Header>
		struct linux_dirent {
		unsigned long  d_ino;     /* Inode number */
		unsigned long  d_off;     /* Offset to next linux_dirent */
		unsigned short d_reclen;  /* Length of this linux_dirent */
		char           d_name[];  /* Filename (null-terminated) */
						   /* length is actually (d_reclen - 2 -
							  offsetof(struct linux_dirent, d_name) */
		};
	</Header>
	<Test Name="ReaddirNormal" FaultSimulationReady="true">
		<Description>Read empty directory entry.</Description>
		<Code>
			DIR * dir;			
			Unres(mkdir("readdir", 0777) == -1, "Failed to create directory.");
			dir = opendir("readdir");
			Unres(dir == 0, "Can not open directory");
			
			struct dirent *ent;
			while(true)
			{
				errno = 0;
				if( readdir(dir) == 0);
					break;
			}
			Check(errno != 0, "Readdir error");
		</Code>
	</Test>
	<Test Name="ReaddirNormalNotEmpty" FaultSimulationReady="true">
		<Description>Read not empty directory entry.</Description>
		<Dir count="1">
			<File count="5"/>	
			<Dir count="5"/>
		</Dir>
		<Code>
			DIR * dir = opendir(DirPaths[0].c_str());
			Unres(dir == 0, "Can not open directory");
			struct dirent *ent;
			int rd_cnt = 0;
			while(true)
			{
				errno = 0;
				if ( readdir(dir) == 0 )
				{
					Check(errno != 0, "readdir error.");
					break;
				}
								
				rd_cnt ++;
			}
			// 5 dirs + 5 files + "./" + "../" = 12
			Check(rd_cnt != 12, "Wrong number of entries read.");
			closedir(dir);
		</Code>
	</Test>

	<Test Name="ReaddirShrink" FaultSimulationReady="true">
		<Description>Shrink directory.</Description>
		<File count="60"/>
		<Code>
			const int BUF_LEN = 100;
			char buf[BUF_LEN];
			struct linux_dirent *ent;
			int fd = open(".", O_DIRECTORY);
			Unres(fd == -1, "Cannot open directory");
			
			int ret = 0;
			Fail((ret = syscall(__NR_getdents, fd, buf, BUF_LEN)) == -1, "Readdir error.");
			cerr<<"Readdir : bytes read: " << ret << endl;
			
			for ( int pos = 0; pos < ret; )
			{
				ent = (linux_dirent*)(buf + pos);
				cerr << "Entry: " << ent->d_name << endl;
				pos += ent->d_reclen;
			}
			
			Fail((ret = syscall(__NR_getdents, fd, buf, BUF_LEN)) == -1, "Readdir error.");			
			cerr<<"Readdir : bytes read: " << ret << endl;
			
			for ( int pos = 0; pos < ret; )
			{
				ent = (linux_dirent*)(buf + pos);
				cerr << "Entry: " << ent->d_name << endl;
				pos += ent->d_reclen;
			}
			
			
			for(int i = 0; i < 60; ++i)
			{
				Unres(unlink(FilePaths[i].c_str()) == -1, "Cannot remove directory");
			}
			
			sync();
			Fail((ret = syscall(__NR_getdents, fd, buf, BUF_LEN)) == -1, "Readdir error.");			
			cerr<<"Readdir : bytes read: " << ret << endl;
			
			for ( int pos = 0; pos < ret; )
			{
				ent = (linux_dirent*)(buf + pos);
				cerr << "Entry: " << ent->d_name << endl;
				pos += ent->d_reclen;
			}
			
		</Code>
	</Test>
	
	<!--Test Name="ReaddirBadFile">
		<Description>Bad file descriptor.</Description>
		<Dir count="1"/>
		<Code>
		
			DIR * dir = opendir(DirPaths[0].c_str());
			closedir(dir);
			ErrorTest( readdir(dir), 0, EBADF);
		</Code>
	</Test-->
</TestSet>
