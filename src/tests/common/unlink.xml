<!--    unlink.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//			Ani Tumanyan <ani.tumanyan92@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="unlink">	
	<Test Name="UnlinkNormal1" FaultSimulationReady="true">
		<Description>unlink()  deletes  a  name  from the file system.  If that name was the last link to a file and no processes have the file  open  the file  is deleted and the space it was using is made available for reuse.</Description>
		<File count="1"/>
		<Code>
			Fail ( unlink ( FilePaths[0].c_str() ) == -1, "Error occured during unlinking normal file.");
			
			 // Check if file exists
			Check ( access( FilePaths[0].c_str(), F_OK ) == 0, "Error: unlinked file still exists.");
		</Code>
	</Test>
	<Test Name="UnlinkNormal2" FaultSimulationReady="true">
		<Description>If the name referred to a symbolic link the link is removed.</Description>
		<File count="1"/>
		<Code>
			const char * symlink_name = "UnlinkNormal2_link";
			unlink(symlink_name);
			Unres ( symlink( FilePaths[0].c_str(), symlink_name ) == -1, "Cannot create symlink.");
			
			Fail ( unlink( symlink_name ) == -1, "Unlink failed.");
			
			// The original file must be there
			Check ( access ( FilePaths[0].c_str(), F_OK ) == -1, "Unlink failed. The original file was deleted.");
		</Code>
	</Test>
</TestSet>
