<!--    xattr.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->
 
<TestSet Name="xattr">
	<GlobalHeader>
#define DO_EXPAND(VAL)  VAL ## 1
#define EXPAND(VAL)     DO_EXPAND(VAL)

#if EXPAND(HAVE_XATTR_H) == 1
	EmptyTestSet(syscall, xattr, Unsupported, "Extended attributes are not supported by the system.")
#else
	</GlobalHeader>
	<Requires>attr/xattr.h</Requires>	
	<Test Name="XattrGetSet" FaultSimulationReady="true">
		<Description>Set and retrieve an extended attribute value.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "user.XattrSetGetTest";
			const char * ValueSet = "asdf";		
			const int ValueLen = strlen(ValueSet);
			char * ValueGot = new char[strlen(ValueSet)];
			
			if ( removexattr(FilePaths[0].c_str(), AttrName) == -1 && errno != ENOATTR )
			{
				if ( errno == ENOTSUP )
				{
					Error("Xattrs are not supported.", Unsupported);
				}
				Unres(true, "Cannot remove xattr.");
			}
			
			Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			Fail ( getxattr(FilePaths[0].c_str(), AttrName, static_cast<void*>(ValueGot), ValueLen ) != ValueLen, "Cannot get xattr.");
			
			Check ( strncmp(ValueSet, ValueGot, ValueLen ), static_cast<string>("Different xattr values: ") + ValueSet + " : " + ValueGot );
			
		</Code>
	</Test>
	<Test Name="XattrRemoveNotEmpty" FaultSimulationReady="true">
		<Description>Set and retrieve an extended attribute value.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "user.Xattr1";
			const char * ValueSet = "a";		
			const int ValueLen = strlen(ValueSet);
			char * ValueGot = new char[strlen(ValueSet)];
			Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			if ( removexattr(FilePaths[0].c_str(), AttrName) == -1 && errno != ENOATTR )
			{
				if ( errno == ENOTSUP )
				{
					Error("Xattrs are not supported.", Unsupported);
				}
				Unres(true, "Cannot remove xattr.");
			}
		
		</Code>
	</Test>
	<Test Name="XattrGetSetTrusted" FaultSimulationReady="true">
		<Description>Set and retrieve an extended attribute value.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "trusted.XattrSetGetTest";
			const char * ValueSet = "asdf";		
			const int ValueLen = strlen(ValueSet);
			char * ValueGot = new char[strlen(ValueSet)];
			
			if ( removexattr(FilePaths[0].c_str(), AttrName) == -1 && errno != ENOATTR )
			{
				if ( errno == ENOTSUP )
				{
					Error("Xattrs are not supported.", Unsupported);
				}
				Unres(true, "Cannot remove xattr.");
			}
			
			Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			Fail ( getxattr(FilePaths[0].c_str(), AttrName, static_cast<void*>(ValueGot), ValueLen ) != ValueLen, "Cannot get xattr.");
			
			Check ( strncmp(ValueSet, ValueGot, ValueLen ), static_cast<string>("Different xattr values: ") + ValueSet + " : " + ValueGot );
			
		</Code>
	</Test>
	<Test Name="XattrGetSetSecurity" FaultSimulationReady="true">
		<Description>Set and retrieve an extended attribute value.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "security.XattrSetGetTest";
			const char * ValueSet = "asdf";		
			const int ValueLen = strlen(ValueSet);
			char * ValueGot = new char[strlen(ValueSet)];
			
			if ( removexattr(FilePaths[0].c_str(), AttrName) == -1 && errno != ENOATTR )
			{
				if ( errno == ENOTSUP )
				{
					Error("Xattrs are not supported.", Unsupported);
				}
				Unres(true, "Cannot remove xattr.");
			}
			
			Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			Fail ( getxattr(FilePaths[0].c_str(), AttrName, static_cast<void*>(ValueGot), ValueLen ) != ValueLen, "Cannot get xattr.");
			
			Check ( strncmp(ValueSet, ValueGot, ValueLen ), static_cast<string>("Different xattr values: ") + ValueSet + " : " + ValueGot );
			
		</Code>
	</Test>
	<Test Name="XattrList" FaultSimulationReady="true">
		<Description>List extended attribute names.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "user.XattrSetGetTest";
			const char * ValueSet = "asdf";
			const int ValueLen = strlen(ValueSet);			
						
			if ( removexattr(FilePaths[0].c_str(), AttrName) == -1 && errno != ENOATTR )
			{
				if ( errno == ENOTSUP )
				{					
					Error("Xattrs are not supported.", Unsupported);
				}
				Unres(true, "Cannot remove xattr.");
			}
			
			Unres ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			char ValueGot[1000];
			
			int size = 0;
			Fail ( (size = listxattr(FilePaths[0].c_str(), ValueGot, 1000 )) < 1, "Cannot list xattrs.");
			
			// Merge the attribute names
			for (  int i = 0; i < size; ++i )
			{
				if ( ValueGot[i] == '\0' )
				{
					ValueGot[i] = ';';					
				}
			}
			
			string XattrList = ValueGot;			
			Check( XattrList.find(AttrName) == string::npos, "The attribute name is not listed." );			
			
		</Code>
	</Test>
	<Test Name="XattrListTrusted" FaultSimulationReady="true">
		<Description>List extended attribute names.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "trusted.XattrSetGetTest";
			const char * ValueSet = "asdf";
			const int ValueLen = strlen(ValueSet);			
						
			if ( removexattr(FilePaths[0].c_str(), AttrName) == -1 && errno != ENOATTR )
			{
				if ( errno == ENOTSUP )
				{					
					Error("Xattrs are not supported.", Unsupported);
				}
				Unres(true, "Cannot remove xattr.");
			}
			
			Unres ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			char ValueGot[1000];
			
			int size = 0;
			Fail ( (size = listxattr(FilePaths[0].c_str(), ValueGot, 1000 )) < 1, "Cannot list xattrs.");
			
			// Merge the attribute names
			for (  int i = 0; i < size; ++i )
			{
				if ( ValueGot[i] == '\0' )
				{
					ValueGot[i] = ';';					
				}
			}
			
			string XattrList = ValueGot;			
			
			Check( XattrList.find(AttrName) == string::npos, "The attribute name is not listed." );			
			
		</Code>
	</Test>
	<Test Name="XattrListSecurity" FaultSimulationReady="true">
		<Description>List extended attribute names.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "security.XattrSetGetTest";
			const char * ValueSet = "asdf";
			const int ValueLen = strlen(ValueSet);			
						
			if ( removexattr(FilePaths[0].c_str(), AttrName) == -1 && errno != ENOATTR )
			{
				if ( errno == ENOTSUP )
				{					
					Error("Xattrs are not supported.", Unsupported);
				}
				Unres(true, "Cannot remove xattr.");
			}
			
			Unres ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			char ValueGot[1000];
			
			int size = 0;
			Fail ( (size = listxattr(FilePaths[0].c_str(), ValueGot, 1000 )) < 1, "Cannot list xattrs.");
			
			// Merge the attribute names
			for (  int i = 0; i < size; ++i )
			{
				if ( ValueGot[i] == '\0' )
				{
					ValueGot[i] = ';';					
				}
			}
			
			string XattrList = ValueGot;			
			
			Check( XattrList.find(AttrName) == string::npos, "The attribute name is not listed." );			
			
		</Code>
	</Test>
    <Test Name="XattrGetSetEmptyValue" FaultSimulationReady="true">
        <Description>Set and retrieve an empty extended attribute value.</Description>
        <File count="1"/>
        <Code>
            const char * AttrName = "user.XattrSetGetTest";
            const char * ValueSet = NULL;   
            const int ValueLen = 0;
            char * ValueGot = new char[1];
           
            if ( removexattr(FilePaths[0].c_str(), AttrName) == -1 && errno != ENOATTR )
            {
                if ( errno == ENOTSUP )
                {
                    Error("Xattrs are not supported.", Unsupported);
                }
                Unres(true, "Cannot remove xattr.");
            }
            Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
           
            Fail ( getxattr(FilePaths[0].c_str(), AttrName, static_cast<void*>(ValueGot), ValueLen ) != ValueLen, "Cannot get xattr.");
           
            Fail ( strncmp(ValueSet, ValueGot, ValueLen ), static_cast<string>("Different xattr values: ") + ValueSet + " : " + ValueGot );
        </Code>
    </Test>
	<GlobalFooter>
#endif
	</GlobalFooter>
</TestSet>
