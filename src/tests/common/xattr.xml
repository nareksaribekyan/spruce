<!--    xattr.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->
 
<TestSet Name="xattr">
	<RequiresAll Defined="HAVE_XATTR_H"/>
	<Requires>attr/xattr.h</Requires>
	<GlobalHeader>
/*
 * Check that filesystem supports extended attributes.
 *
 * If filesystem doesn't support axtended attributes, terminate test
 * with Unsupported.
 *
 * Macro should be included with test which define at least one file via 'File' tag.
 */
#define check_xattr()  do{ \
if ( removexattr(FilePaths[0].c_str(), "user.attr") == -1 && errno != ENOATTR ) \
{ \
	if(errno == ENOTSUP) Unsupp("Xattrs are not supported."); \
	Unres(true, "Unexpected error while removing xattr which doesn' exist."); \
}} while(0)
	</GlobalHeader>
	<Test Name="XattrGetSet">
		<Description>Set and retrieve an extended user attribute.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "user.XattrSetGetTest";
			const char * ValueSet = "asdf";		
			const int ValueLen = strlen(ValueSet);
			char * ValueGot = new char[strlen(ValueSet)];
			
			check_xattr();
			
			Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			Fail ( getxattr(FilePaths[0].c_str(), AttrName, static_cast<void*>(ValueGot), ValueLen ) != ValueLen, "Cannot get xattr.");
			
			Check ( strncmp(ValueSet, ValueGot, ValueLen ), static_cast<string>("Different xattr values: ") + ValueSet + " : " + ValueGot );
		</Code>
	</Test>
	<Test Name="XattrRemoveNotEmpty" FaultSimulationReady="true">
		<Description>Set and remove an extended user attribute.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "user.Xattr1";
			const char * ValueSet = "a";		
			const int ValueLen = strlen(ValueSet);

			check_xattr();
			
			Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			Fail ( removexattr(FilePaths[0].c_str(), AttrName) == -1, "Cannot remove xattr.");
		</Code>
	</Test>
	<Test Name="XattrGetSetTrusted" FaultSimulationReady="true">
		<Description>Set and retrieve an extended trusted attribute.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "trusted.XattrSetGetTest";
			const char * ValueSet = "asdf";		
			const int ValueLen = strlen(ValueSet);
			char * ValueGot = new char[strlen(ValueSet)];
			
			check_xattr();
			
			Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			Fail ( getxattr(FilePaths[0].c_str(), AttrName, static_cast<void*>(ValueGot), ValueLen ) != ValueLen, "Cannot get xattr.");
			
			Check ( strncmp(ValueSet, ValueGot, ValueLen ), static_cast<string>("Different xattr values: ") + ValueSet + " : " + ValueGot );
		</Code>
	</Test>
	<Test Name="XattrGetSetSecurity" FaultSimulationReady="true">
		<Description>Set and retrieve an extended security attribute.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "security.XattrSetGetTest";
			const char * ValueSet = "asdf";		
			const int ValueLen = strlen(ValueSet);
			char * ValueGot = new char[strlen(ValueSet)];

			check_xattr();

			Fail ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			Fail ( getxattr(FilePaths[0].c_str(), AttrName, static_cast<void*>(ValueGot), ValueLen ) != ValueLen, "Cannot get xattr.");
			
			Check ( strncmp(ValueSet, ValueGot, ValueLen ), static_cast<string>("Different xattr values: ") + ValueSet + " : " + ValueGot );
		</Code>
	</Test>
	<Test Name="XattrList" FaultSimulationReady="true">
		<Description>Set an extended user attribute and list it.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "user.XattrSetGetTest";
			const char * ValueSet = "asdf";
			const int ValueLen = strlen(ValueSet);			

			check_xattr();

			Unres ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			char ValueGot[1000];
			
			int size = 0;
			Fail ( (size = listxattr(FilePaths[0].c_str(), ValueGot, 1000 )) < 1, "Cannot list xattrs.");
			
			// Merge the attribute names
			for (  int i = 0; i < size; ++i )
			{
				if ( ValueGot[i] == '\0' )
				{
					ValueGot[i] = ';';					
				}
			}
			
			string XattrList = ValueGot;			
			Check( XattrList.find(AttrName) == string::npos, "The attribute name is not listed." );			
		</Code>
	</Test>
	<Test Name="XattrListTrusted" FaultSimulationReady="true">
		<Description>Set an extended trusted attribute and list it.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "trusted.XattrSetGetTest";
			const char * ValueSet = "asdf";
			const int ValueLen = strlen(ValueSet);			

			check_xattr();

			Unres ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			char ValueGot[1000];
			
			int size = 0;
			Fail ( (size = listxattr(FilePaths[0].c_str(), ValueGot, 1000 )) < 1, "Cannot list xattrs.");
			
			// Merge the attribute names
			for (  int i = 0; i < size; ++i )
			{
				if ( ValueGot[i] == '\0' )
				{
					ValueGot[i] = ';';					
				}
			}
			
			string XattrList = ValueGot;			
			
			Check( XattrList.find(AttrName) == string::npos, "The attribute name is not listed." );			
		</Code>
	</Test>
	<Test Name="XattrListSecurity" FaultSimulationReady="true">
		<Description>Set an extended security attribute and list it.</Description>
		<File count="1"/>
		<Code>
			const char * AttrName = "security.XattrSetGetTest";
			const char * ValueSet = "asdf";
			const int ValueLen = strlen(ValueSet);			
						
			check_xattr();

			Unres ( setxattr(FilePaths[0].c_str(), AttrName, ValueSet, ValueLen, XATTR_CREATE) == -1, "Cannot set xattr.");
			
			char ValueGot[1000];
			
			int size = 0;
			Fail ( (size = listxattr(FilePaths[0].c_str(), ValueGot, 1000 )) < 1, "Cannot list xattrs.");
			
			// Merge the attribute names
			for (  int i = 0; i < size; ++i )
			{
				if ( ValueGot[i] == '\0' )
				{
					ValueGot[i] = ';';					
				}
			}
			
			string XattrList = ValueGot;			
			
			Check( XattrList.find(AttrName) == string::npos, "The attribute name is not listed." );			
		</Code>
	</Test>
    <Test Name="XattrGetSetEmptyValue" FaultSimulationReady="true">
        <Description>Set and retrieve an empty extended attribute value.</Description>
        <File count="1"/>
        <Code>
            const char * AttrName = "user.XattrSetGetTest";
           
			check_xattr();

            Fail ( setxattr(FilePaths[0].c_str(), AttrName, NULL, 0, XATTR_CREATE) == -1, "Cannot create xattr with empty value.");
           
            Fail ( getxattr(FilePaths[0].c_str(), AttrName, NULL, 0 ) != 0, "Cannot get xattr or it is not empty as should be.");
        </Code>
    </Test>
</TestSet>
