<!--    mount_umount.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//      	Karen Tsirunyan <ktsirunyan@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="mount_umount" per-mount-options="false" mount-oriented="false" use-mkfs="true">
	<Requires>sys/mount.h</Requires><!-- Should come before linux/fs.h-->
	<Requires>linux/fs.h</Requires><!--For some mount flags-->
	<Test Name="MountGeneral">
		<Dangerous check="stability" fs="ext4"/>
		<Dangerous check="stability" fs="btrfs"/>
		<Dangerous check="stability" fs="xfs"/>
		<Description>Trying to mount the device to another partition</Description>
		<Code>
			Fail (mount( DeviceName, MountPoint, FileSystem, 0, 0) == -1, "Mount failed");
		</Code>
	</Test>
	<Test Name="UmountGeneral" use-mount="true">
		<Dangerous check="stability" fs="ext4"/>
		<Dangerous check="stability" fs="btrfs"/>
		<Dangerous check="stability" fs="xfs"/>
		<Description>Trying to unmount the partition.</Description>				
		<Code>
			File f("file");
			int fd = f.GetFileDescriptor();
			char * buf = new char[1024*1024];
				
			for ( int i = 0 ; i < 50; ++i )
				Unres(write(fd, buf, 1024*1024) == -1, "Cannot write.");
			
			close(fd);
			
			sync();
			
			unlink("file");
			
			Unres( chdir("/") == -1, "Cannot change directory to root." );
			
			Fail ( umount( MountPoint) == -1, "Unmount failed");
		</Code>
	</Test>
	<Test Name="RemountGeneral">
		<Dangerous check="stability" fs="ext4"/>
		<Dangerous check="stability" fs="btrfs"/>
		<Dangerous check="stability" fs="xfs"/>
		<Description>Trying to remount the device to the same partition(with MS_REMOUNT flag activated)</Description>
		<Code>
			Unres (mount( DeviceName, MountPoint, FileSystem, 0, 0) == -1, "Mount failed.");
			
			Fail ( mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT, 0) == -1, "Remount failed.");
		</Code>		
	</Test>
	<Test Name="RemountReadOnly">
		<Dangerous check="stability" fs="ext4"/>
		<Dangerous check="stability" fs="btrfs"/>
		<Dangerous check="stability" fs="xfs"/>
		<Description>Trying to remount the device to the same partition as readonly.</Description>
		<Code>
			Unres (mount( DeviceName, MountPoint, FileSystem, 0, 0) == -1, "Mount failed.");
			Fail ( mount( DeviceName, MountPoint, FileSystem, MS_REMOUNT | MS_RDONLY, 0) == -1, "Remount failed.");
		</Code>		
	</Test>
	<Test Name="NoATimeGeneral">
		<Description>Trying to mount the device with MS_NOATIME flag attempted.</Description>
		<Code>
			Check(mount( DeviceName, MountPoint, FileSystem, MS_NOATIME, 0) == -1, "Mount with MS_NOATIME flag attempted failed");
		</Code>		
	</Test>
	<Test Name="NoDevGeneral">
		<Description>Trying to mount the device with MS_NODEV flag attempted.</Description>
		<Code>
			Check (mount( DeviceName, MountPoint, FileSystem, MS_NODEV, 0) == -1,
				"Mount with MS_NODEV flag attempted failed");
		</Code>		
	</Test>
	<Test Name="NoDirATimeGeneral">
		<Description>Trying to mount the device with MS_NODIRATIME flag attempted.</Description>		
		<Code>
			Check (mount( DeviceName, MountPoint, FileSystem, MS_NODIRATIME, 0) == -1, "Mount with MS_NODIRATIME flag attempted failed");
		</Code>		
	</Test>
	<Test Name="NoExecGeneral">
		<Description>Trying to mount the device with MS_NOEXEC flag attempted.</Description>
		<Code>
			Check(mount( DeviceName, MountPoint, FileSystem, MS_NOEXEC, 0) == -1, "Mount with MS_NOEXEC flag attempted failed");
		</Code>
	</Test>
	<Test Name="NoSUIDGeneral">
		<Description>Trying to mount the device with MS_NOSUID flag attempted.</Description>
		<Code>
			Check (mount( DeviceName, MountPoint, FileSystem, MS_NOSUID, 0) == -1, "Mount with MS_NOSUID flag attempted failed");					
		</Code>
	</Test>
	<Test Name="MountRdOnlyGeneral">
		<Description>Trying to mount the device with MS_RDONLY flag attempted.</Description>		
		<Code>
			Check(mount( DeviceName, MountPoint, FileSystem, MS_RDONLY, 0) == -1, "Mount with MS_RDONLY flag attempted failed");			
		</Code>		
	</Test>
	<Test Name="MountRELATIME">
		<Description>Trying to mount the device with MS_RELATIME flag attempted.</Description>		
		<Code>
			Check (mount( DeviceName, MountPoint, FileSystem, MS_RELATIME, 0) == -1, "Mount with MS_RELATIME flag attempted failed");
		</Code>		
	</Test>
	
	<Test Name="MountMS_SILENT">
		<Description>Trying to mount the device with MS_SILENT flag attempted.</Description>		
		<Code>
			Check (mount( DeviceName, MountPoint, FileSystem, MS_SILENT, 0) == -1, "Mount with MS_SILENT flag attempted failed");
		</Code>		
	</Test>
	
	<Test Name="MountMS_STRICTATIME">
		<Description>Trying to mount the device with MS_STRICTATIME flag attempted.</Description>		
		<Code>
			Check (mount( DeviceName, MountPoint, FileSystem, MS_STRICTATIME, 0) == -1, "Mount with MS_STRICTATIME flag attempted failed");
		</Code>
	</Test>
	<Test Name="MountMS_SYNCHRONOUS">
		<Description>Trying to mount the device with MS_SYNCHRONOUS flag attempted.</Description>		
		<Code>
			Check (mount( DeviceName, MountPoint, FileSystem, MS_SYNCHRONOUS, 0) == -1, "Mount with MS_SYNCHRONOUS flag attempted failed");
		</Code>	
	</Test>
	<Test Name="MountWrongOption">
		<Description>Trying to mount the device with wrong mount option</Description>		
		<Code>
			Check( mount( DeviceName, MountPoint, FileSystem, 0, "NotAnOption") == 0, "Mount should fail, but it did not");
		</Code>
	</Test>
	<Test Name="UmountNameTooLong" use-mount="true">
		<Description>Umount: Target name is too long.</Description>
		<Code>
			ENameTooLongTest(umount(path), -1);
		</Code>
	</Test>
	<Test Name="MountNameTooLong">
		<Description>Mount: Target name is too long.</Description>
		<Code>
			ENameTooLongTest(mount(DeviceName, path, FileSystem, 0, NULL), -1);
		</Code>
	</Test>
	<Test Name="MountBusy">
		<Description>Mount: source  is  already  mounted.</Description>
		<Code>
			// sets MS_RDONLY flags for read-only mounted device just in case
			int rdonlyflag = 0;
			if(PartitionManager::IsOptionEnabled("ro"))
				rdonlyflag |= MS_RDONLY;
			
			Unres ( mount( DeviceName, MountPoint, FileSystem, 0 | rdonlyflag, 0), "Cannot perform initial mount." );	
			
			ErrorTest(mount( DeviceName, MountPoint, FileSystem, 0 | rdonlyflag, 0), -1, EBUSY);
		</Code>
	</Test>
	<Test Name="MountLoop2">
		<Description>Mount: a move was attempted, while target is a descendant of source.</Description>
		<Code>
			// sets MS_RDONLY flags for read-only mounted device just in case
			int rdonlyflag = 0;
			if(PartitionManager::IsOptionEnabled("ro"))
				rdonlyflag |= MS_RDONLY;
			ErrorTest(mount( "/", MountPoint, FileSystem, MS_MOVE | rdonlyflag, 0 ), -1, ELOOP);
		</Code>
	</Test>
	<Test Name="MountInval1">
		<Description>Mount: a  remount  (MS_REMOUNT) was  attempted,  but  source  was not already mounted on target.</Description>
		<Code>
			// sets MS_RDONLY flags for read-only mounted device just in case
			int rdonlyflag = 0;
			
			if(PartitionManager::IsOptionEnabled("ro"))
				rdonlyflag |= MS_RDONLY;
			
			ErrorTest(mount( DeviceName, "/bin", FileSystem, MS_REMOUNT | rdonlyflag, 0 ), -1, EINVAL);
		</Code>
	</Test>
	<Test Name="MountInval2">
		<Description>Mount: a move (MS_MOVE) was attempted, but source was not  a  mount point.</Description>
		<Code>
			// sets MS_RDONLY flags for read-only mounted device just in case
			int rdonlyflag = 0;
			if(PartitionManager::IsOptionEnabled("ro"))
				rdonlyflag |= MS_RDONLY;
			ErrorTest(mount( "/dev/zero", MountPoint, FileSystem, MS_MOVE | rdonlyflag, 0 ), -1, EINVAL);
		</Code>
	</Test>
	<Test Name="UmountInval2" use-mount="true">
		<Description>Umount2:  umount2()  was  called  with MNT_EXPIRE and either MNT_DETACH or MNT_FORCE.</Description>
		<Code>
			ErrorTest(umount2( MountPoint, MNT_EXPIRE | MNT_DETACH ), -1, EINVAL);
		</Code>
	</Test>
	<Test Name="MountNotBlock">
		<Description>Mount: source is not a block device.</Description>
		<Code>
			// sets MS_RDONLY flags for read-only mounted device just in case
			int rdonlyflag = 0;
			if(PartitionManager::IsOptionEnabled("ro"))
				rdonlyflag |= MS_RDONLY;
			ErrorTest(mount( "/dev/zero", MountPoint, FileSystem, 0 | rdonlyflag, 0 ), -1, ENOTBLK);
		</Code>
	</Test>
	<Test Name="MountNoEnt1">
		<Description>Mount: A pathname was empty.</Description>
		<Code>
			// sets MS_RDONLY flags for read-only mounted device just in case
			int rdonlyflag = 0;
			if(PartitionManager::IsOptionEnabled("ro"))
				rdonlyflag |= MS_RDONLY;
			ErrorTest(mount( DeviceName, "", FileSystem, 0 | rdonlyflag, 0 ), -1, ENOENT);
		</Code>
	</Test>
	<Test Name="MountNoEnt2">
		<Description>Mount: A pathname had a nonexistent component.</Description>
		<Code>
			// sets MS_RDONLY flags for read-only mounted device just in case
			int rdonlyflag = 0;
			if(PartitionManager::IsOptionEnabled("ro"))
				rdonlyflag |= MS_RDONLY;
			ErrorTest(mount( DeviceName, "non_existing_path", FileSystem, 0 | rdonlyflag, 0 ), -1, ENOENT);
		</Code>
	</Test>
	<Test Name="MountNotDir">
		<Description>Mount: target, or a prefix of source, is not a directory.</Description>
		<File count="1"/>
		<Code>
			// sets MS_RDONLY flags for read-only mounted device just in case
			int rdonlyflag = 0;
			if(PartitionManager::IsOptionEnabled("ro"))
				rdonlyflag |= MS_RDONLY;
			ENotDirTest(mount( DeviceName, path, FileSystem, 0 | rdonlyflag, 0 ), -1);
		</Code>
	</Test>
</TestSet>
