<!--    mknod.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Authors:
//      	Ani Tumanyan <ani.tumanyan92@gmail.com>
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="mknod">	
	<GlobalHeader>
/* Test that mknod correctly create node. */
#define GenericMknodTest(mode, node_descr) 					 			\
	Unres ( getuid() != 0, "This test should be executed by root."); 	\
																		\
	if ( PartitionManager::IsOptionEnabled("ro") )						\
		Unsupp("Read-only file system.");								\
																		\
	const char *node_name = "node_name";								\
	struct stat st;														\
																		\
	/* Just in case. Normally this should go to 'Footer' */				\
	unlink( node_name );												\
	errno = 0;/* previous unlink may fail with ENOENTRY, ignore it */	\
																		\
	Fail ( mknod( node_name, mode, 0 ) == -1,	 						\
		"mknod() failed to create " node_descr ".");					\
																		\
	Unres ( stat( node_name, &st ) == -1,								\
		"stat() for node created is failed.");							\
																		\
	Check ( st.st_uid != getuid(),										\
		"mknod incorerctly set user identificator.");					\
																		\
	Check( (st.st_mode ^ (mode)) & S_IFMT,								\
		"Type of node created by mknod differs from requested one.");	\
																		\
	Check ( st.st_nlink != 1,											\
		"mknod create node with number of hard links more that 1.");
	</GlobalHeader>
	<Test Name="MknodNormal_REG">
		<Description>Create regular file with mknod()</Description>
		<Code>
			GenericMknodTest(S_IFREG | 0777, "ordinary file with mode 0777")
		</Code>
	</Test>
	<Test Name="MknodNormal_FIFO">
		<Description>Create fifo with mknod()</Description>
		<Code>
			GenericMknodTest(S_IFIFO | 0777, "fifo special with mode 0777")
		</Code>
	</Test>
	<Test Name="MknodNormal_CHR">
		<Description>Create character device file with mknod()</Description>
		<Code>
			GenericMknodTest(S_IFCHR | 0777, "character special with mode 0777")
		</Code>
	</Test>
	<Test Name="MknodNormal_BLK">
		<Description>Create block device with mknod()</Description>
		<Code>
			GenericMknodTest(S_IFBLK | 0777, "block special with mode 0777")
		</Code>
	</Test>
	<Test Name="MknodSymlink">
		<Description>Path is a symlink.</Description>
		<File count="1"/>
		<Code>
			const char * SymlinkPath = "some_link";
			Unres(symlink(FilePaths[0].c_str(), SymlinkPath) == -1, "Cannot create symlink.");
			ErrorTest(mknod(SymlinkPath, 0777, 0), -1, EEXIST);
		</Code>
	</Test>
	<Test Name="MknodInvalidArg1">
		<Description>Invalid mode.</Description>
		<Code>
			ErrorTest(mknod("some_node", -1, 0), -1, EINVAL);
		</Code>
	</Test>
	<Test Name="MknodInvalidArg2">
		<Description>Invalid device number.</Description>
		<Code>
			ErrorTest(mknod("some_node", 0777, -1), -1, EINVAL);
		</Code>
	</Test>
	<Test Name="MknodTooLongPath">
		<Description>pathname too long.</Description>
		<Code>
			ENameTooLongTest(mknod(path, 0777, 0), -1);
		</Code>
	</Test>
	<Test Name="MknodNotDir">
		<Description>A component of pathname is not a directory.</Description>
		<File count="1"/>
		<Code>
			ENotDirTest(mknod(path, 0777, 0), -1);
		</Code>
	</Test>
	<Test Name="MknodPermDenied">
		<Description>Permission denied.</Description>
		<Dir count="1"/>
		<Code>
			Unres( chmod(DirPaths[0].c_str(), 0700) == -1, "Cannot change permissions on directory." );
			Unres ( chdir(DirPaths[0].c_str()) == -1, "Cannot change directory." );
			const char * path = "some_node";
			ENoAccessTest(mknod(path, 0777, 0), -1);
		</Code>
	</Test>
</TestSet>
