<!--    acl.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Nellie Danielyan <Nellie.92.d@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="acl">
<Requires>sys/acl.h</Requires>
	<Requires>attr/xattr.h</Requires>
	<RunIf message="ACL is not supported with 'noacl' mount option">
		!PartitionManager::IsOptionEnabled("noacl")
	</RunIf>
	<Test Name="GetSetACLByFD">
		<Description>Gets or sets file's ACL by file discriptor.</Description>		
		<Dir count="1" />
		<Header>
			acl_t acl = NULL;
		</Header>
		<Code>
			Fail ( (acl = acl_get_fd(DirDs[0])) == NULL, "Cannot get file's ACL." );
			
			Fail(acl_set_fd(DirDs[0],acl) == -1,"Cannot set file ACL");
			
			Fail(acl_delete_def_file(DirPaths[0].c_str()) == -1,"Cannot delete default ACL");
		</Code>
		<Footer>
			if(acl)
				acl_free(acl);
		</Footer>
	</Test>
	
	<Test Name="ACLGetSet">
		<Description>Set user-defined acl for file and extract it.</Description>		
		<File count="1" />
		<Header>
			acl_t acl = NULL, acl_file = NULL;
		</Header>
		<Code>
			acl = acl_from_text("u::r,u:nobody:r,g::r,m::r,o::r");
			Unres(acl == NULL, "Cannot initialize ACL.");
			
			/* Set ACL for file. */
			
			Fail(acl_set_file(FilePaths[0].c_str(),ACL_TYPE_ACCESS,acl) == -1,"Cannot set file access ACL" );
			
			/* 
			 * Request extended attributes for directory.
			 * Them should also contain ACL(currently, not checked).
			 *
			 * Note, that ACL control uses extended attributes.
			 */
			char ValueGot[1000];
			
			int size = 0;
			Unres ( (size = listxattr(FilePaths[0].c_str(), ValueGot, sizeof(ValueGot) )) < 1,
				"Cannot list xattrs.");
			
			/* Request acl for file and traverse it. */
			Fail ( ( acl_file = acl_get_file(FilePaths[0].c_str(),ACL_TYPE_ACCESS) ) == NULL, "Cannot get file's access ACL." );
			
			acl_entry_t entry;
			int res;
			for(res = acl_get_entry(acl_file, ACL_FIRST_ENTRY, &entry);
				res == 1;
				res = acl_get_entry(acl_file, ACL_NEXT_ENTRY, &entry));
			Check( res == -1, "Cannot get file's access ACL entry." );
		</Code>
		<Footer>
			if(acl)
				acl_free(acl);
			if(acl_file)
				acl_free(acl_file);
		</Footer>
	</Test>
	<Test Name="ACLGetSetDir">
		<Description>Set user-defined acl for directory and create objects in that dir.</Description>		
		<Dangerous check="stability" fs="jfs"/>
		<Dangerous check="stability" fs="ext4"/>
		<Dir count="1" />
		<Header>
			acl_t acl = NULL;
			int fd = -1;
		</Header>
		<Code>
			acl = acl_from_text("u::r,u:nobody:r,g::r,m::r,o::r");
			Unres(acl == NULL, "Cannot initialize ACL.");
			
			/* Set ACL for directory. */
			Fail(acl_set_file(DirPaths[0].c_str(),ACL_TYPE_DEFAULT,acl) == -1,
				"Cannot set directory default ACL");
			
			/* 
			 * Request extended attributes for file.
			 * Them should also contain ACL(currently, not checked).
			 *
			 * Note, that ACL control uses extended attributes.
			 */
			char ValueGot[1000];
			
			int size = 0;
			Unres ( (size = listxattr(DirPaths[0].c_str(), ValueGot, 1000 )) < 1, "Cannot list xattrs.");
			
			/* Create objects in directory */
			string FilePath = DirPaths[0] + "/some_file";
			string DirPath = DirPaths[0] + "/some_dir";
			
			Fail(mkdir(DirPath.c_str(), 0444) == -1, "Cannot create directory");
			Unres(chmod(DirPath.c_str(), 0666) == -1, "Cannot chmod directory");
			rmdir(DirPath.c_str());
			
			Fail( (fd = creat(FilePath.c_str(), 0777)) == -1, "Cannot create file.");
			Unres ( fchmod(fd, 0666) == -1, "Cannot chmod file");
			close(fd);
			fd = -1;
			unlink(FilePath.c_str());
		</Code>
		<Footer>
			if(acl)
				acl_free(acl);
			if(fd != -1)
				close(fd);
		</Footer>
	</Test>
	<Test Name="ACLGetNotCached" FaultSimulationReady="true" mount-oriented="false" use-mount="true">
		<Description>Intialize an ACL, set and mount-umount to get not cached acl.</Description>		
		<File count="1" />
		<Header>
			acl_t acl = NULL, acl_file = NULL;
		</Header>
		<Code>
			acl = acl_from_text("u::r,u:nobody:r,g::r,m::r,o::r");
			Unres(acl == NULL, "Cannot initialize ACL.");

			Unres(acl_set_file(FilePaths[0].c_str(),ACL_TYPE_ACCESS,acl) == -1,"Cannot set file access ACL" );

			close(FDs[0]);
			Unres ( chdir("/") == -1, "Cannot change directory." );
			
			int res;
			res = PartitionManager::RestorePartition(DeviceName, MountPoint, FileSystem);
			Unres(res!= PS_Success, res == PS_Fatal ? "Device too small." : "Partition mount or umount failed.");
		
			Unres ( chdir(MountPoint) == -1, "Cannot change directory." );
			
			Fail ( ( acl_file = acl_get_file(FilePaths[0].c_str(),ACL_TYPE_ACCESS) ) == NULL, "Cannot get file's access ACL." );
		</Code>		
		<Footer>
			if(acl)
				acl_free(acl);
			if(acl_file)
				acl_free(acl_file);
		</Footer>
	</Test>
	
	<!-- 
		There is no way to garantee that ACL tag is invalid:
		ACL entry is allocated using malloc() and acl_set_tag() checks
		its argument.
		Also, filesystem driver normally convert xattr to ACL using
		posix_acl_from_xattr() function, which is checks tags for all
		entries. So testing how fs driver process incorrect ACL entry tag
		doesn't add driver's code coverage.
	
	-->
	<!--Test Name="ACLSetWrongTag" FaultSimulationReady="true">
		<Description>Set ACL with incorrect tag.</Description>		
		<File count="1" />
		<Code>
			acl_t acl = acl_init(4);
			acl_entry_t entry = NULL;
			acl_permset_t perms = NULL;
			Unres(acl == NULL, "Cannot initialize ACL working storage.");
			Unres( acl_create_entry(&acl, &entry) == -1, "Cannot create ACL entry." );
			Unres( acl_get_permset(entry, &perms) == -1, "Cannot get permition set" ); 
			Unres( acl_set_permset(entry, perms) == -1, "Cannot set permition set to an entry" ); 
			acl_set_file(FilePaths[0].c_str(),ACL_TYPE_ACCESS,acl);	
			acl_free(acl);
		</Code>		
	</Test-->
	<Test Name="AccessErrAccess">
		<Description>Set and get default acl to a file not to a directory.</Description>
		<File count="1" />
		<Header>
			acl_t acl = NULL;
		</Header>
		<Code>
			acl = acl_from_text("u::r,u:nobody:r,g::r,m::r,o::r");
			Unres(acl == NULL, "Cannot initialize acl.");
			ErrorTest(acl_set_file(FilePaths[0].c_str(),ACL_TYPE_DEFAULT,acl), -1, EACCES );
			ErrorTest(acl_get_file(FilePaths[0].c_str(),ACL_TYPE_DEFAULT), NULL, EACCES );
		</Code>
		<Footer>
			if(acl)
				acl_free(acl);
		</Footer>
	</Test>
</TestSet>
