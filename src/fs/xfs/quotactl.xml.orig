<!--    quotactl.xml
//      
//      Copyright (C) 2011, Institute for System Programming
//                          of the Russian Academy of Sciences (ISPRAS)
//      Author:
//			Vahram Martirosyan <vmartirosyan@gmail.com>
//      
//      This program is free software; you can redistribute it and/or modify
//      it under the terms of the GNU General Public License as published by
//      the Free Software Foundation; either version 2 of the License, or
//      (at your option) any later version.
//      
//      This program is distributed in the hope that it will be useful,
//      but WITHOUT ANY WARRANTY; without even the implied warranty of
//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//      GNU General Public License for more details.
//      
//      You should have received a copy of the GNU General Public License
//      along with this program; if not, write to the Free Software
//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
//      MA 02110-1301, USA.
-->

<TestSet Name="quotactl">
	<GlobalHeader>
#define DO_EXPAND(VAL)  VAL ## 1
#define EXPAND(VAL)     DO_EXPAND(VAL)

#if EXPAND(HAVE_XFS_H) == 1
	EmptyTestSet(xfs, quotactl, Unsupported, "XFS header file is not found in the system. Please install the xfslibs-dev package.")
#else
	</GlobalHeader>
	<!--Requires>linux/quota.h</Requires-->
	<Requires>sys/quota.h</Requires>
	<Requires>xfs/xqm.h</Requires>	
	<Header>
			Unres( strcmp(DeviceName, "") == 0, "No device name is provided." );
			Unres( strcmp(MountPoint, "") == 0, "No mount point is provided." );			
	</Header>
	<Test Name="QuotactlXQuotaOn" FaultSimulationReady="true">
		<Description>Turn on quotas for an XFS file system.</Description>		
		<Code>
			int cmd_on = QCMD(Q_XQUOTAON, USRQUOTA);			
			int flag = XFS_QUOTA_UDQ_ACCT | XFS_QUOTA_UDQ_ENFD;
			// In case if there is nothing to do, quotactl returns EEXIST error code on XFS.
			Fail( quotactl(cmd_on, DeviceName, QFMT_VFS_V0, (caddr_t)&flag) == -1 && errno != EEXIST, "Cannot enable quotas V0." );
			
			return Success;
		</Code>
	</Test>
	<Test Name="QuotactlXSetGetQuota" FaultSimulationReady="true">
		<Description>Set and get disk quota limits and current usage for user id.</Description>
		<Code>
			int cmd_xset_qlim = QCMD(Q_XSETQLIM, USRQUOTA);
			int cmd_xget_quota = QCMD(Q_XGETQUOTA, USRQUOTA);
			
			struct fs_disk_quota quota;
			struct fs_disk_quota quota2;
			
			memset(&quota, 0, sizeof(quota));
			memset(&quota2, 0, sizeof(quota2));
			
			quota.d_blk_hardlimit = 1024;
			quota.d_fieldmask = FS_DQ_LIMIT_MASK;
			
			Fail( quotactl(cmd_xset_qlim, DeviceName, 0, (caddr_t)&quota) == -1, "Cannot get quota." );
			
			Fail( quotactl(cmd_xget_quota, DeviceName, 0, (caddr_t)&quota2) == -1, "Cannot get quota." );
			
			cerr << "quota2.d_blk_hardlimit=" << quota2.d_blk_hardlimit << endl;
			Fail ( quota.d_blk_hardlimit != quota2.d_blk_hardlimit, "Different values after set-get operations." );
			
			return Success;
		</Code>
	</Test>
	<Test Name="QuotactlXQstat" FaultSimulationReady="true">
		<Description>Returns  an fs_quota_stat structure containing XFS file system specific quota information.</Description>
		<Code>
			int cmd_xqstat = QCMD(Q_XGETQSTAT, USRQUOTA);
			
			struct fs_quota_stat quota_stat;
			
			memset(&quota_stat, 0, sizeof(quota_stat));
			
			Fail( quotactl(cmd_xqstat, DeviceName, 0, (caddr_t)&quota_stat) == -1, "Cannot get quota stat." );
			
			return Shallow;
		</Code>
	</Test>
	<Test Name="QuotactlXQuotaOff" FaultSimulationReady="true">
		<Description>Turn off quotas for an XFS file system.</Description>
		<Code>
			int flag = XFS_QUOTA_UDQ_ACCT | XFS_QUOTA_UDQ_ENFD;
			int cmd_off = QCMD(Q_XQUOTAOFF, USRQUOTA);
			
			Fail( quotactl(cmd_off, DeviceName, 0, (caddr_t)&flag) == -1 && errno != EEXIST, "Cannot disable quota." );
			
			return Success;
		</Code>
	</Test>
	<!-- Must be called after QuotactlXQuotaOff -->
	<Test Name="QuotactlXQuotaRm" FaultSimulationReady="true">
		<Description>Free the disk space taken by disk quotas. Quotas must have already been turned off.</Description>
		<Code>
			int flag = XFS_QUOTA_UDQ_ACCT | XFS_QUOTA_UDQ_ENFD;
			int cmd_rm = QCMD(Q_XQUOTARM, USRQUOTA);
			
			Fail( quotactl(cmd_rm, DeviceName, 0, (caddr_t)&flag) == -1, "Cannot remove quotas." );
			
			return Success;
		</Code>
	</Test>
	<GlobalFooter>
#endif
	</GlobalFooter>
</TestSet>

