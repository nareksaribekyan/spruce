<TestSet Name="Ioctl">
	<Test Name="SetFlagsGetFlags">
		<Description>Try to set and get some flag values.</Description>
			<Requires>
				<Header>sys/ioctl.h</Header>
				<Header>fcntl.h</Header>
				<Header>sys/mount.h</Header>
				<Header>ext4.hpp</Header>
				<Header>pwd.h</Header>
			</Requires>
		<Code>
			<Main>
				int set_flags = EXT4_EXTENTS_FL | 1; // We may NOT clear the extents flag...
				int get_flags = 0;
				
				// Backup the old values just in case
				int old_flags;	
				if ( ioctl(fd, EXT4_IOC_GETFLAGS, &old_flags) == -1 )
				{
					cerr << "Error backing up old values. " << strerror(errno);
					return Unres;
				}
				
				// Set our testing flag values
				if ( ioctl(fd, EXT4_IOC_SETFLAGS, &set_flags) == -1 )
				{
					cerr << "Error setting new flag values. " << strerror(errno);
					return Unres;
				}
			
				// Get the flags back
				if ( ioctl(fd, EXT4_IOC_GETFLAGS, &get_flags) == -1 )
				{
					cerr << "Error getting flag values back. " << strerror(errno);
					return Unres;
				}
				
				// Restore the original flags
				if ( ioctl(fd, EXT4_IOC_SETFLAGS, &old_flags) == -1 )
				{
					cerr << "Error restoring old flag values. " << strerror(errno);
					return Unres;
				}
				
				// Compare them
				if ( get_flags != set_flags )
				{
					cerr << "Set and Get flags mismatch";
					return Fail;
				}
				else
				{
					cerr << "Set and Get flags match";
					return Success;
				}
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="ClearExtentsFlags">
		<Code>
			<Main>
				int result = 0;
				
				// Backup the old values just in case
				int old_flags;
				if ( ioctl(fd, EXT4_IOC_GETFLAGS, &old_flags) == -1 )
				{
					cerr << "Error backing up old values. " << strerror(errno);
					return Unres;
				}
				
				int non_permitted_flags = old_flags & ~EXT4_EXTENTS_FL; // We may NOT clear the extents flag... but we shall try!
				
				// Try to set the non-permitted flag
				if ( ( result = ioctl(fd, EXT4_IOC_SETFLAGS, &non_permitted_flags ) ) == 0  )
				{
					cerr << "It was permitted to set non-permitted flag!. " << strerror(errno);
					return Fail;
				}
				else 
				{
					cerr << "It was NOT permitted to set non-permitted flag!. " << strerror(errno);
					return Success;
				}
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="SetFlagsNotOwner">
		<Code>
			<Main>
				if ( fd == -1 )
				{
					cerr << "The file descriptor is invalid: " << strerror(errno);
					return Unres;
				}
				
				int flags = EXT4_EXTENTS_FL;
				int result = 0;
				
				struct passwd* Nobody = getpwnam("nobody");
				if ( Nobody == NULL )
				{
					cerr << "Cannot obtain information about the 'nobody' user. " << strerror(errno);
					return Unres;
				}
				
				if (  seteuid( Nobody->pw_uid ) == -1 )
				{
					cerr << "Cannot change the user ID: " <<  strerror(errno);
					return Unres;
				}
				
				// Try to set the non-permitted flag
				
				result = ioctl(fd, EXT4_IOC_SETFLAGS, &flags );
				
				// Restore root user
				seteuid(0);
				
				if ( result == 0 )
				{
					cerr << "It was permitted to set the flag not being file owner!. ";
					return Fail;
				}
				else if ( result == -1 && errno != EACCES )
				{
					cerr << "Error while setting flags. " << strerror(errno);
					return Fail;
				}
				else 
				{
					cerr << "It was NOT permitted to set flag not being file owner!. " << strerror(errno);
					return Success;
				}
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="SetVersionGetVersion">
		<Code>
			<Main>
				int set_version = 10; 
				int get_version = 0;
				
				// Backup the old version just in case
				int old_version;
				if ( ioctl(fd, EXT4_IOC_GETVERSION, &old_version) == -1 )
				{
					cerr << "Error backing up old version. " << strerror(errno);
					return Unres;
				}
				
				// Set our testing version value
				if ( ioctl(fd, EXT4_IOC_SETVERSION, &set_version) == -1 )
				{
					cerr << "Error setting new version values. " << strerror(errno);
					return Unres;
				}
				
				// Get the version back
				if ( ioctl(fd, EXT4_IOC_GETVERSION, &get_version) == -1 )
				{
					cerr << "Error getting version value back. " << strerror(errno);
					return Unres;
				}
				
				// Restore the original version
				if ( ioctl(fd, EXT4_IOC_SETVERSION, &old_version) == -1 )
				{
					cerr << "Error restoring old version value. " << strerror(errno);
					return Unres;
				}
				
				// Compare them
				if ( get_version != set_version )
				{
					cerr << "Set and Get version mismatch";
					return Fail;
				}
				else
				{
					cerr << "Set and Get versions match";
					return Success;
				}
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="WaitForReadonly">
		<Code>
			<Main>
				if ( ioctl(fd, EXT4_IOC_WAIT_FOR_READONLY, NULL) == -1 )
				{
					cerr << "Error waiting for readonly. " << strerror(errno);
					return Fail;
				}
				else
				{
					cerr << "Wait for readonly was successful. " << endl;
					return Success;
				}		
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="GroupExtend">
		<Code>
			<Main>
				struct stat st;
				if ( fstat (fd, &st) == -1 )
				{
					cerr << "Cannot stat file " << MountPoint;
					return Unres;
				}
			
				cerr << "Shallow test";
				int NewPartitionSizeInBlocks = 210000;
				ioctl(fd, EXT4_IOC_GROUP_EXTEND, &NewPartitionSizeInBlocks);
				
				return Success;
				
				//Status status;
				
				NewPartitionSizeInBlocks = 210000;// _PartitionSizeInBlocks + 10;
				if ( ioctl(fd, EXT4_IOC_GROUP_EXTEND, &NewPartitionSizeInBlocks) == -1 )
				{
					cerr << "Error during online resize. " << strerror(errno);
					return Fail;
				}
				else
				{
					cerr << "Online resize was successful. " << endl;
					return Success;
				}
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="MoveExtent">
		<Code>
			<Main>
				File file_donor("ioctl_donorfd");
				int fd_donor = file_donor.GetFileDescriptor();	
			
				
				if ( fd_donor == -1 )
				{
					cerr << "The file descriptor is invalid: " << strerror(errno);
					return Unres;
				}
				
				unlink("ioctlfd_donor");
				
				if ( fallocate(fd_donor, 0, 0, 10*4096) ) // 10 blocks
				{
					cerr << "Cannot allocate space for donor file: " << strerror(errno);
					return Unres;
				}
				
				
				if ( fallocate(fd, 0, 0, 10*4096) ) // 10 blocks
				{
					cerr << "Cannot allocate space for original file: " << strerror(errno);
					return Unres;
				}
				
				//unsigned int BlockCount = 1;
				
				struct move_extent me;
				memset(&me, 0, sizeof(me));
				me.donor_fd = fd_donor;
				me.orig_start = 0;
				me.donor_start = 0;
				me.len = 10;
				me.moved_len = 10;
				
				
				if ( ioctl(fd, EXT4_IOC_MOVE_EXT, &me) == -1 )
				{
					cerr << "Error moving extent. " << strerror(errno);
					return Fail;
				}
				else
				{
					cerr << "Move extent was successful. " << endl;
					return Success;
				}
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="GroupAdd">
		<Code>
			<Main>
				struct ext4_new_group_data input;
				//memset(&input, 0, sizeof(input));		
				
				cerr << "Shallow test" << endl;
				ioctl(fd, EXT4_IOC_GROUP_ADD, &input);
				
				return Success;		
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="Migrate">
		<Code>
			<Main>
				if ( chdir ("/") == -1 )
				{
					cerr << "Cannot change directory. Error : " << strerror(errno);
					return Unres;
				}
				
				//if ( umount2( MountPoint.c_str(), MNT_FORCE ) == -1 )	
				if ( umount( MountPoint.c_str() ) == -1 )
				{
					cerr << "Cannot unmount " << MountPoint << ". Error: " << strerror(errno);		
					return Unres;
				}
				//cerr << ("mkfs.ext2 " + _DeviceName).c_str() << endl;
				
				UnixCommand mkfs("mkfs.ext3");
				vector<string> args;			
				//args.push_back("-O");
				//args.push_back("extents");
				args.push_back(DeviceName);
				
				ProcessResult * res;
				res = mkfs.Execute(args);
				if ( res->GetStatus() != Success )
				{
					cerr << "Cannot create ext3 filesystem on device " << DeviceName << endl;
					cerr << "Error: " << res->GetOutput() << endl;
					return Unres;
				}
				
				if ( mount( DeviceName.c_str(), MountPoint.c_str(), "ext3", 0, 0) == -1)
				{
					cerr << "Cannot mount ext3 FS " << DeviceName << " to " << MountPoint << " Error: " << strerror(errno);
					return Unres;
				}
				
				Status result = Unknown;
				
				File mountFile(MountPoint, S_IRUSR | S_IWUSR, O_DIRECTORY | O_RDONLY);
				int _file = mountFile.GetFileDescriptor();	
			
				if ( _file == -1 )
				{
					cerr << "Cannot open folder: " << MountPoint << ". Error : " << strerror(errno);
					result = Unres;
					goto finally;
				}
				
				
				if ( ioctl(_file, EXT4_IOC_MIGRATE, 0) == -1 )
				{
					cerr << "Error migrating. " << strerror(errno) << endl;
					result = Fail;
					goto finally;
				}
				else
				{
					cerr << "Migration was successful. " << endl;
					result = Success;
					goto finally;
				}
			</Main>
			<Finally>
				finally:
				if ( umount( MountPoint.c_str() ) == -1 )
				{
					cerr << "Cannot unmount " << MountPoint << ". Error: " << strerror(errno);		
					return Unres;
				}
				
				UnixCommand mkfs2("mkfs.ext4");
				vector<string> args2;		
				args2.push_back(DeviceName);
				
				ProcessResult * res2;
				res2 = mkfs2.Execute(args2);
				if ( res2->GetStatus() != Success )
				{
					cerr << "Cannot create ext4 filesystem on device " << DeviceName << endl;
					cerr << "Error: " << res2->GetOutput() << endl;
					return Unres;
				}
				
				//system(("mkfs.ext2 " + _DeviceName).c_str());
				if ( mount( MountPoint.c_str(), DeviceName.c_str(), "ext4", 0, 0) == -1)
				{
					cerr << "Cannot mount " << DeviceName << " back to " << MountPoint << endl;
					cerr << "Error: " << strerror(errno);
					return Unres;
				}
			</Finally>
		</Code>
	</Test>
	<Test Name="AllocDABlocks">
		<Code>
			<Main>
				if ( ioctl(fd, EXT4_IOC_ALLOC_DA_BLKS, 0) == -1 )
				{
					cerr << "Error during delayed allocation of blocks. " << strerror(errno);
					return Fail;
				}
				else
				{
					cerr << "Blocks delayed allocation was successful. " << endl;
					return Success;
				}
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="Fitrim">
		<Code>
			<Main>
				#ifdef FITRIM

					
					if ( ioctl(fd, FITRIM, 0) == -1 )
					{
						cerr << "Error FITRIM. " << strerror(errno);
						return Fail;
					}
					else
					{
						cerr << "FITRIM was successful. " << endl;
						return Success;
					}
				#else
					cerr << "FITRIM is not supported";
					return Unsupported;
				#endif
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
	<Test Name="Unsupported">
		<Code>
			<Main>
				if ( ( ioctl(fd, -100, 0) == -1 ) && ( errno == ENOTTY ) )
				{
					cerr << "Unsupported command was processed successfully. " << endl;
					return Success;
				}
				else
				{
					cerr << "Error on unsupported command. " << strerror(errno);
					return Fail;
				}
			</Main>
			<Finally>
			</Finally>
		</Code>
	</Test>
</TestSet>
