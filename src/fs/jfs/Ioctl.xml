<TestSet Name="Ioctl">
	<Test Name="SetFlagsGetFlags">
		<Description>Try to set and get some flag values.</Description>
			<Requires>
				<Header>sys/ioctl.h</Header>
				<Header>fcntl.h</Header>
				<Header>linux/fs.h</Header>
			</Requires>
		<Code>
			int set_flags = 1; // We may NOT clear the extents flag...
			int get_flags = 0;
			
			// Backup the old values just in case
			int old_flags;
			if ( ioctl(fd, FS_IOC_GETFLAGS, &old_flags) == -1 )
			{
				cerr << "Error backing up old values. " << strerror(errno);
				return Unres;
			}
			
			// Set our testing flag values
			if ( ioctl(fd, FS_IOC_SETFLAGS, &set_flags) == -1 )
			{
				cerr << "Error setting new flag values. " << strerror(errno);
				return Unres;
			}
			
			// Get the flags back
			if ( ioctl(fd, FS_IOC_GETFLAGS, &get_flags) == -1 )
			{
				cerr << "Error getting flag values back. " << strerror(errno);
				return Unres;
			}
			
			// Restore the original flags
			if ( ioctl(fd, FS_IOC_SETFLAGS, &old_flags) == -1 )
			{
				cerr << "Error restoring old flag values. " << strerror(errno);
				return Unres;
			}
			
			// Compare them
			if ( get_flags != set_flags )
			{
				cerr << "Set and Get flags mismatch";
				return Fail;
			}
			else
			{
				cerr << "Set and Get flags match";
				return Success;
			}
		</Code>
	</Test>
	<Test Name="Unsupported">
		<Description>Try to perform an unsupported operation.</Description>
			<Requires>
				<Header>sys/ioctl.h</Header>
				<Header>fcntl.h</Header>
				<Header>linux/fs.h</Header>
			</Requires>
		<Code>
			if ( ( ioctl(fd, -100, 0) == -1 ) && ( errno == ENOTTY ) )
			{
				cerr << "Unsupported command was processed successfully. " << strerror(errno);
				return Success;
			}
			else
			{
				cerr << "Error on unsupported command. " << strerror(errno);
				return Fail;
			}
		</Code>
	</Test>
</TestSet>

