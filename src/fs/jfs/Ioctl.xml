<TestSet Name="Ioctl">
	<Requires>sys/ioctl.h</Requires>
	<Requires>fcntl.h</Requires>
	<Requires>linux/fs.h</Requires>
	<Test Name="SetFlagsGetFlags">
		<Description>Try to set and get some flag values.</Description>
		<File count="1"/>			
		<Code>
				
			int set_flags = 1; // We may NOT clear the extents flag...
			int get_flags = 0;
			
			// Backup the old values just in case
			int old_flags;
			Unres ( ioctl(FDs[0], FS_IOC_GETFLAGS, &old_flags ) == -1, "Error backing up old values.");
			
			// Set our testing flag values
			Unres ( ioctl(FDs[0], FS_IOC_SETFLAGS, &set_flags ) == -1, "Error setting new flag values.");
			
			// Get the flags back
			Unres ( ioctl(FDs[0], FS_IOC_GETFLAGS, &get_flags ) == -1, "Error getting flag values back.");
			
			// Restore the original flags
			Unres ( ioctl(FDs[0], FS_IOC_SETFLAGS, &old_flags ) == -1, "Error restoring old flag values.");
			
			// Compare them
			Fail ( get_flags != set_flags, "Set and Get flags mismatch");
			return Success;			
		</Code>
	</Test>	
	<Test Name="SetFlagsNotOwner">
		<Description>Change flag by not the file owner.</Description>
		<File count="1"/>
		<Code>
			int flags = 1;			
			ENoAccessTest(ioctl(FDs[0], FS_IOC_SETFLAGS, &flags ), -1);
		</Code>
	</Test>	
	<Test Name="Unsupported">
		<Description>Unsupported operation.</Description>
		<File count="1"/>
		<Code>
			ErrorTest(ioctl(FDs[0], -100, 0), -1, ENOTTY);
		</Code>
	</Test>
</TestSet>

